{
  "address": "0x86881585cB3DfD2dDAA7A490E16F844B357eb67C",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernorshipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newCollector",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldCollector",
          "type": "address"
        }
      ],
      "name": "NewEndpointImplementation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newMaster",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldMaster",
          "type": "address"
        }
      ],
      "name": "NewMaster",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newPool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldPool",
          "type": "address"
        }
      ],
      "name": "NewPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorshipTransfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claimGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endpointImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "master",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setEndpointImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setMaster",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8e45bfea4edca8d302eac6c1de599f12f5cec0364f9beacbb08eb851d6699056",
  "receipt": {
    "to": null,
    "from": "0x784037f1e2C0F2125852109992ACCd6030f0244C",
    "contractAddress": "0x86881585cB3DfD2dDAA7A490E16F844B357eb67C",
    "transactionIndex": 48,
    "gasUsed": "414402",
    "logsBloom": "0x
    "blockHash": "0xe02cd65e8233ddacca3eed45f8867ece55e197f987c0648f42407170fd45790b",
    "transactionHash": "0x8e45bfea4edca8d302eac6c1de599f12f5cec0364f9beacbb08eb851d6699056",
    "logs": [
      {
        "transactionIndex": 48,
        "blockNumber": 7712859,
        "transactionHash": "0x8e45bfea4edca8d302eac6c1de599f12f5cec0364f9beacbb08eb851d6699056",
        "address": "0x86881585cB3DfD2dDAA7A490E16F844B357eb67C",
        "topics": [
          "0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000784037f1e2c0f2125852109992accd6030f0244c"
        ],
        "data": "0x",
        "logIndex": 193,
        "blockHash": "0xe02cd65e8233ddacca3eed45f8867ece55e197f987c0648f42407170fd45790b"
      }
    ],
    "blockNumber": 7712859,
    "cumulativeGasUsed": "15108491",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "dd9a2e41f9cf4986a2d8fd0249872d04",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newCollector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldCollector\",\"type\":\"address\"}],\"name\":\"NewEndpointImplementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMaster\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldMaster\",\"type\":\"address\"}],\"name\":\"NewMaster\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldPool\",\"type\":\"address\"}],\"name\":\"NewPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorshipTransfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endpointImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"master\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setEndpointImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setMaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimGovernance()\":{\"details\":\"Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor.\"},\"governor()\":{\"details\":\"Returns the address of the current Governor.\"},\"isGovernor()\":{\"details\":\"Returns true if the caller is the current Governor.\"},\"transferGovernance(address)\":{\"details\":\"Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete\",\"params\":{\"_newGovernor\":\"Address of the new Governor\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ingest/IngestRegistry.sol\":\"IngestRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/governance/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OUSD Governable Contract\\n * @dev Copy of the openzeppelin Ownable.sol contract with nomenclature change\\n *      from owner to governor and renounce methods removed. Does not use\\n *      Context.sol like Ownable.sol does for simplification.\\n * @author Origin Protocol Inc\\n */\\nabstract contract Governable {\\n    // Storage position of the owner and pendingOwner of the contract\\n    // keccak256(\\\"OUSD.governor\\\");\\n    bytes32 private constant governorPosition =\\n        0x7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a;\\n\\n    // keccak256(\\\"OUSD.pending.governor\\\");\\n    bytes32 private constant pendingGovernorPosition =\\n        0x44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db;\\n\\n    // keccak256(\\\"OUSD.reentry.status\\\");\\n    bytes32 private constant reentryStatusPosition =\\n        0x53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac4535;\\n\\n    // See OpenZeppelin ReentrancyGuard implementation\\n    uint256 constant _NOT_ENTERED = 1;\\n    uint256 constant _ENTERED = 2;\\n\\n    event PendingGovernorshipTransfer(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    event GovernorshipTransferred(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial Governor.\\n     */\\n    constructor() {\\n        _setGovernor(msg.sender);\\n        emit GovernorshipTransferred(address(0), _governor());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function governor() public view returns (address) {\\n        return _governor();\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function _governor() internal view returns (address governorOut) {\\n        bytes32 position = governorPosition;\\n        assembly {\\n            governorOut := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending Governor.\\n     */\\n    function _pendingGovernor()\\n        internal\\n        view\\n        returns (address pendingGovernor)\\n    {\\n        bytes32 position = pendingGovernorPosition;\\n        assembly {\\n            pendingGovernor := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the Governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(isGovernor(), \\\"Caller is not the Governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current Governor.\\n     */\\n    function isGovernor() public view returns (bool) {\\n        return msg.sender == _governor();\\n    }\\n\\n    function _setGovernor(address newGovernor) internal {\\n        bytes32 position = governorPosition;\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        bytes32 position = reentryStatusPosition;\\n        uint256 _reentry_status;\\n        assembly {\\n            _reentry_status := sload(position)\\n        }\\n\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_reentry_status != _ENTERED, \\\"Reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        assembly {\\n            sstore(position, _ENTERED)\\n        }\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        assembly {\\n            sstore(position, _NOT_ENTERED)\\n        }\\n    }\\n\\n    function _setPendingGovernor(address newGovernor) internal {\\n        bytes32 position = pendingGovernorPosition;\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the current Governor. Must be claimed for this to complete\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function transferGovernance(address _newGovernor) external onlyGovernor {\\n        _setPendingGovernor(_newGovernor);\\n        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\\n    }\\n\\n    /**\\n     * @dev Claim Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the new Governor.\\n     */\\n    function claimGovernance() external {\\n        require(\\n            msg.sender == _pendingGovernor(),\\n            \\\"Only the pending Governor can complete the claim\\\"\\n        );\\n        _changeGovernor(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function _changeGovernor(address _newGovernor) internal {\\n        require(_newGovernor != address(0), \\\"New Governor is address(0)\\\");\\n        emit GovernorshipTransferred(_governor(), _newGovernor);\\n        _setGovernor(_newGovernor);\\n    }\\n}\\n\",\"keccak256\":\"0xb3dce4586edcdedaa0573e194bfd4fbd064a1494f7246c19debb673a9d2157a9\",\"license\":\"MIT\"},\"contracts/ingest/IngestRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Ingest Registry Contract\\n * @author Origin Protocol Inc\\n */\\n\\nimport \\\"../governance/Governable.sol\\\";\\n\\ncontract IngestRegistry is Governable {\\n    address public endpointImplementation;\\n    address public master;\\n    address public pool;\\n\\n    event NewEndpointImplementation(\\n        address indexed newCollector,\\n        address indexed oldCollector\\n    );\\n\\n    event NewMaster(address indexed newMaster, address indexed oldMaster);\\n\\n    event NewPool(address indexed newPool, address indexed oldPool);\\n\\n    function setEndpointImplementation(address addr) external onlyGovernor {\\n        emit NewEndpointImplementation(addr, endpointImplementation);\\n        endpointImplementation = addr;\\n    }\\n\\n    function setMaster(address addr) external onlyGovernor {\\n        emit NewMaster(addr, master);\\n        master = addr;\\n    }\\n\\n    function setPool(address addr) external onlyGovernor {\\n        emit NewPool(addr, pool);\\n        pool = addr;\\n    }\\n}\\n\",\"keccak256\":\"0x9c522ace26190abe5934cc715675b637348cb020e779caa864e35b9f92e8c0ae\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506100273360008051602061068e83398151915255565b60008051602061068e833981519152546040516001600160a01b03909116906000907fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a908290a36106118061007d6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80636b9ab8c3116100665780636b9ab8c31461010b5780636e2c779a1461011e578063c7af335214610131578063d38bfff414610149578063ee97f7f31461015c57600080fd5b80630c340a24146100a357806316f0115b146100c857806326fae0d3146100db5780634437152a146100f05780635d36b19014610103575b600080fd5b6100ab61016f565b6040516001600160a01b0390911681526020015b60405180910390f35b6002546100ab906001600160a01b031681565b6100ee6100e9366004610556565b61018c565b005b6100ee6100fe366004610556565b610216565b6100ee610297565b6100ee610119366004610556565b61033d565b6000546100ab906001600160a01b031681565b6101396103bd565b60405190151581526020016100bf565b6100ee610157366004610556565b6103ee565b6001546100ab906001600160a01b031681565b60006101876000805160206105bc8339815191525490565b905090565b6101946103bd565b6101b95760405162461bcd60e51b81526004016101b090610584565b60405180910390fd5b6001546040516001600160a01b03918216918316907f86252e3757e33841641a80f45eb868576e3205beeb90ea3a70114de9a7d313b090600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b61021e6103bd565b61023a5760405162461bcd60e51b81526004016101b090610584565b6002546040516001600160a01b03918216918316907f77948cb83ef3caff9ac13dfab1ea1f8a6875c98370287ce587f5dbc74cc5b6b090600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db546001600160a01b0316336001600160a01b0316146103325760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b60648201526084016101b0565b61033b33610492565b565b6103456103bd565b6103615760405162461bcd60e51b81526004016101b090610584565b600080546040516001600160a01b0391821692918416917f8d2065282a4348c35ad3bc6d40ab75481ba38bf106502fe1545a1575d4d76fa991a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006103d56000805160206105bc8339815191525490565b6001600160a01b0316336001600160a01b031614905090565b6103f66103bd565b6104125760405162461bcd60e51b81526004016101b090610584565b61043a817f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b806001600160a01b031661045a6000805160206105bc8339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b6001600160a01b0381166104e85760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f72206973206164647265737328302900000000000060448201526064016101b0565b806001600160a01b03166105086000805160206105bc8339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a3610553816000805160206105bc83398151915255565b50565b600060208284031215610567578081fd5b81356001600160a01b038116811461057d578182fd5b9392505050565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f7200000000000060408201526060019056fe7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4aa264697066735822122018559642b709e8c4e8e4d5aaac9d2d5efae817409a62c51d90798b2b4edf384664736f6c634300080400337bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80636b9ab8c3116100665780636b9ab8c31461010b5780636e2c779a1461011e578063c7af335214610131578063d38bfff414610149578063ee97f7f31461015c57600080fd5b80630c340a24146100a357806316f0115b146100c857806326fae0d3146100db5780634437152a146100f05780635d36b19014610103575b600080fd5b6100ab61016f565b6040516001600160a01b0390911681526020015b60405180910390f35b6002546100ab906001600160a01b031681565b6100ee6100e9366004610556565b61018c565b005b6100ee6100fe366004610556565b610216565b6100ee610297565b6100ee610119366004610556565b61033d565b6000546100ab906001600160a01b031681565b6101396103bd565b60405190151581526020016100bf565b6100ee610157366004610556565b6103ee565b6001546100ab906001600160a01b031681565b60006101876000805160206105bc8339815191525490565b905090565b6101946103bd565b6101b95760405162461bcd60e51b81526004016101b090610584565b60405180910390fd5b6001546040516001600160a01b03918216918316907f86252e3757e33841641a80f45eb868576e3205beeb90ea3a70114de9a7d313b090600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b61021e6103bd565b61023a5760405162461bcd60e51b81526004016101b090610584565b6002546040516001600160a01b03918216918316907f77948cb83ef3caff9ac13dfab1ea1f8a6875c98370287ce587f5dbc74cc5b6b090600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db546001600160a01b0316336001600160a01b0316146103325760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b60648201526084016101b0565b61033b33610492565b565b6103456103bd565b6103615760405162461bcd60e51b81526004016101b090610584565b600080546040516001600160a01b0391821692918416917f8d2065282a4348c35ad3bc6d40ab75481ba38bf106502fe1545a1575d4d76fa991a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006103d56000805160206105bc8339815191525490565b6001600160a01b0316336001600160a01b031614905090565b6103f66103bd565b6104125760405162461bcd60e51b81526004016101b090610584565b61043a817f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b806001600160a01b031661045a6000805160206105bc8339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b6001600160a01b0381166104e85760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f72206973206164647265737328302900000000000060448201526064016101b0565b806001600160a01b03166105086000805160206105bc8339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a3610553816000805160206105bc83398151915255565b50565b600060208284031215610567578081fd5b81356001600160a01b038116811461057d578182fd5b9392505050565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f7200000000000060408201526060019056fe7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4aa264697066735822122018559642b709e8c4e8e4d5aaac9d2d5efae817409a62c51d90798b2b4edf384664736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimGovernance()": {
        "details": "Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor."
      },
      "governor()": {
        "details": "Returns the address of the current Governor."
      },
      "isGovernor()": {
        "details": "Returns true if the caller is the current Governor."
      },
      "transferGovernance(address)": {
        "details": "Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete",
        "params": {
          "_newGovernor": "Address of the new Governor"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9545,
        "contract": "contracts/ingest/IngestRegistry.sol:IngestRegistry",
        "label": "endpointImplementation",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9547,
        "contract": "contracts/ingest/IngestRegistry.sol:IngestRegistry",
        "label": "master",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 9549,
        "contract": "contracts/ingest/IngestRegistry.sol:IngestRegistry",
        "label": "pool",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}