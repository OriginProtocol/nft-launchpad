{
  "address": "0x7436f9Ffd073D9aB7e3904866e03270dc18d4c33",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "series_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startTime_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockStartTime_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimEndTime_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalRewardETH",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalRewardOGN",
          "type": "uint256"
        }
      ],
      "name": "Finale",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "points",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "initialSupply",
          "type": "uint256"
        }
      ],
      "name": "bootstrap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "expectedRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getPoints",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalPoints",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blockStamp",
          "type": "uint256"
        }
      ],
      "name": "pointsInTime",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "season",
      "outputs": [
        {
          "internalType": "bool",
          "name": "bootstrapped",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "snapshotTaken",
          "type": "bool"
        },
        {
          "internalType": "uint128",
          "name": "totalPoints",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "series",
      "outputs": [
        {
          "internalType": "contract ISeries",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "snapshot",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "rewardETH",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "rewardOGN",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "unstake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        },
        {
          "internalType": "uint128",
          "name": "points",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x103d98551868331ce61a971c91baeb1cb6ebf24903b44ef15a46d31d7f868d87",
  "receipt": {
    "to": null,
    "from": "0xc77926a061E782b219aaF2248023dfdc3d54b0e4",
    "contractAddress": "0x7436f9Ffd073D9aB7e3904866e03270dc18d4c33",
    "transactionIndex": 37,
    "gasUsed": "1268731",
    "logsBloom": "0x
    "blockHash": "0x289617bbfdf2ac325e94a0382632b55c2bee4e253f0f95158092eb11cf47b514",
    "transactionHash": "0x103d98551868331ce61a971c91baeb1cb6ebf24903b44ef15a46d31d7f868d87",
    "logs": [],
    "blockNumber": 15103093,
    "cumulativeGasUsed": "5764971",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCcE8E784c777fb9435F89f4E45f8b7FC49f7669f",
    1657584000,
    1665360000,
    1667952000,
    1670544000
  ],
  "numDeployments": 1,
  "solcInputHash": "dff4d4389c4eb41a5891ad25f05e3896",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"series_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockStartTime_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimEndTime_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRewardETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRewardOGN\",\"type\":\"uint256\"}],\"name\":\"Finale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"name\":\"bootstrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"expectedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getPoints\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPoints\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockStamp\",\"type\":\"uint256\"}],\"name\":\"pointsInTime\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"season\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"bootstrapped\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"snapshotTaken\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"totalPoints\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"series\",\"outputs\":[{\"internalType\":\"contract ISeries\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snapshot\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"rewardETH\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rewardOGN\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"points\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Finale(uint256,uint256)\":{\"details\":\"Staking period has ended and reward snapshot taken\",\"params\":{\"totalRewardETH\":\"- Total ETH reward to split amongst stakers\",\"totalRewardOGN\":\"- Total OGN reward to split amongst stakers\"}},\"Stake(address,uint256,uint256)\":{\"details\":\"User has staked\",\"params\":{\"amount\":\"- amount of OGN staked\",\"points\":\"- points user received for this stake\",\"userAddress\":\"- address of the user\"}},\"Unstake(address)\":{\"details\":\"User has unstaked\",\"params\":{\"userAddress\":\"- address of the user\"}}},\"kind\":\"dev\",\"methods\":{\"bootstrap(uint256)\":{\"details\":\"Set the initial total points, potentially rolling over stake      totals from the previous season.\",\"params\":{\"initialSupply\":\"- The amount of staked OGN at the start of the      season.\"}},\"claim(address)\":{\"params\":{\"userAddress\":\"- the user staking their OGN\"},\"returns\":{\"_0\":\"Amount of ETH profit share to pay the user\",\"_1\":\"Amount of OGN rewards to pay the user\"}},\"constructor\":{\"params\":{\"claimEndTime_\":\"- Timestamp at which users can no longer claim      profit share and rewards\",\"endTime_\":\"- Timestamp ending this season\",\"lockStartTime_\":\"- Timestamp at which new stakes are no longer accepted\",\"series_\":\"- The Series staking and registry contract\",\"startTime_\":\"- Timestamp starting this season\"}},\"expectedRewards(address)\":{\"details\":\"This will return zero values if outside the claim period.\",\"params\":{\"userAddress\":\"- Address for the user to calculate\"},\"returns\":{\"_0\":\"ethShare - Amount of ETH a user would receive if claimed now\",\"_1\":\"ognRewards - Amount of OGN a user would receive if claimed now\"}},\"getPoints(address)\":{\"params\":{\"userAddress\":\"- address for which to return their points\"},\"returns\":{\"_0\":\"total points\"}},\"getTotalPoints()\":{\"returns\":{\"_0\":\"total points of all users' stakes\"}},\"pointsInTime(uint256,uint256)\":{\"details\":\"Calculate the points a user would receive if they staked at a      specific block timestamp.\",\"params\":{\"amount\":\"- The amount of OGN they would stake\",\"blockStamp\":\"- The block timestamp to calculate for\"},\"returns\":{\"_0\":\"points. 0 if out of season.\"}},\"stake(address,uint256)\":{\"details\":\"This may be called multiple times and the amount returned will      be for the user's totals, not the amount for this specific call.\",\"params\":{\"amount\":\"- the amount of (st)OGN being staked\",\"userAddress\":\"- the user staking their OGN\"},\"returns\":{\"_0\":\"total points received for the user's stake\"}},\"unstake(address)\":{\"params\":{\"userAddress\":\"- the user staking their OGN\"},\"returns\":{\"_0\":\"Amount of ETH profit share to pay the user\",\"_1\":\"Amount of OGN rewards to pay the user\"}}},\"title\":\"Story Season staking contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim(address)\":{\"notice\":\"Calculate and return  ETH profit share and OGN rewards and zero      out the user's stake points.\"},\"expectedRewards(address)\":{\"notice\":\"Return the expected rewards for a user.\"},\"getPoints(address)\":{\"notice\":\"Total points for a user's stake\"},\"getTotalPoints()\":{\"notice\":\"Total points of all stakes\"},\"stake(address,uint256)\":{\"notice\":\"Stake OGN for a share of ETH profits and OGN rewards\"},\"unstake(address)\":{\"notice\":\"Calculate and return  ETH profit share and OGN rewards and zero      out the user's stake points.\"}},\"notice\":\"Season logic contract to calculate rewards of stakers\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/Season.sol\":\"Season\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf93da311a3b34a8363a759c404d575746fa38351fb29ecd646c608e27219ebec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"contracts/governance/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OUSD Governable Contract\\n * @dev Copy of the openzeppelin Ownable.sol contract with nomenclature change\\n *      from owner to governor and renounce methods removed. Does not use\\n *      Context.sol like Ownable.sol does for simplification.\\n * @author Origin Protocol Inc\\n */\\nabstract contract Governable {\\n    // Storage position of the owner and pendingOwner of the contract\\n    // keccak256(\\\"OUSD.governor\\\");\\n    bytes32 private constant governorPosition =\\n        0x7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a;\\n\\n    // keccak256(\\\"OUSD.pending.governor\\\");\\n    bytes32 private constant pendingGovernorPosition =\\n        0x44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db;\\n\\n    // keccak256(\\\"OUSD.reentry.status\\\");\\n    bytes32 private constant reentryStatusPosition =\\n        0x53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac4535;\\n\\n    // See OpenZeppelin ReentrancyGuard implementation\\n    uint256 constant _NOT_ENTERED = 1;\\n    uint256 constant _ENTERED = 2;\\n\\n    event PendingGovernorshipTransfer(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    event GovernorshipTransferred(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial Governor.\\n     */\\n    constructor() {\\n        _setGovernor(msg.sender);\\n        emit GovernorshipTransferred(address(0), _governor());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function governor() public view returns (address) {\\n        return _governor();\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function _governor() internal view returns (address governorOut) {\\n        bytes32 position = governorPosition;\\n        assembly {\\n            governorOut := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending Governor.\\n     */\\n    function _pendingGovernor()\\n        internal\\n        view\\n        returns (address pendingGovernor)\\n    {\\n        bytes32 position = pendingGovernorPosition;\\n        assembly {\\n            pendingGovernor := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the Governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(isGovernor(), \\\"Caller is not the Governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current Governor.\\n     */\\n    function isGovernor() public view returns (bool) {\\n        return msg.sender == _governor();\\n    }\\n\\n    function _setGovernor(address newGovernor) internal {\\n        bytes32 position = governorPosition;\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        bytes32 position = reentryStatusPosition;\\n        uint256 _reentry_status;\\n        assembly {\\n            _reentry_status := sload(position)\\n        }\\n\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_reentry_status != _ENTERED, \\\"Reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        assembly {\\n            sstore(position, _ENTERED)\\n        }\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        assembly {\\n            sstore(position, _NOT_ENTERED)\\n        }\\n    }\\n\\n    function _setPendingGovernor(address newGovernor) internal {\\n        bytes32 position = pendingGovernorPosition;\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the current Governor. Must be claimed for this to complete\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function transferGovernance(address _newGovernor) external onlyGovernor {\\n        _setPendingGovernor(_newGovernor);\\n        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\\n    }\\n\\n    /**\\n     * @dev Claim Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the new Governor.\\n     */\\n    function claimGovernance() external {\\n        require(\\n            msg.sender == _pendingGovernor(),\\n            \\\"Only the pending Governor can complete the claim\\\"\\n        );\\n        _changeGovernor(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function _changeGovernor(address _newGovernor) internal {\\n        require(_newGovernor != address(0), \\\"New Governor is address(0)\\\");\\n        emit GovernorshipTransferred(_governor(), _newGovernor);\\n        _setGovernor(_newGovernor);\\n    }\\n}\\n\",\"keccak256\":\"0xb3dce4586edcdedaa0573e194bfd4fbd064a1494f7246c19debb673a9d2157a9\",\"license\":\"MIT\"},\"contracts/staking/FeeVault.sol\":{\"content\":\"/*\\n * Origin Protocol\\n * https://originprotocol.com\\n *\\n * Released under the MIT license\\n * SPDX-License-Identifier: MIT\\n * https://github.com/OriginProtocol/nft-launchpad\\n *\\n * Copyright 2022 Origin Protocol, Inc\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in\\n * all copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n * SOFTWARE.\\n */\\n\\npragma solidity ^0.8.4;\\n\\nimport {IERC20Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\nimport {Initializable} from '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport {PausableUpgradeable} from '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\nimport {SafeERC20Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\n\\nimport {Governable} from '../governance/Governable.sol';\\n\\ninterface IFeeVault {\\n    function controller() external view returns (address);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function sendETHRewards(address userAddress, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function sendTokenRewards(\\n        address tokenAddress,\\n        address userAddress,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function recoverERC20(\\n        address tokenAddress,\\n        uint256 tokenAmount,\\n        address toAddress\\n    ) external returns (bool);\\n\\n    function setController(address controllerAddress) external;\\n}\\n\\n/**\\n * @title Story FeeVault contract\\n * @notice Contract to collect NFT sales profits and rewards to be distributed\\n *      to OGN stakers.\\n */\\ncontract FeeVault is Initializable, Governable, PausableUpgradeable, IFeeVault {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    address public override controller;\\n\\n    address private constant ASSET_ETH =\\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    // @dev Rewards have been sent to the season\\n    event RewardsSent(\\n        address indexed asset,\\n        address indexed toAddress,\\n        uint256 amount\\n    );\\n\\n    // @dev A new controller has been set\\n    event NewController(address controllerAddress);\\n\\n    modifier onlyController() {\\n        require(_msgSender() == controller, 'FeeVault: Sender not controller');\\n        _;\\n    }\\n\\n    /**\\n     * @param controllerAddress - Address for the account that will receive the\\n     *      rewards\\n     */\\n    function initialize(address controllerAddress) external initializer {\\n        __Pausable_init();\\n        // controller will probably be zero on initial deploy\\n        controller = controllerAddress;\\n    }\\n\\n    ///\\n    /// Externals\\n    ///\\n\\n    /**\\n     * @dev Send ETH rewards to a user. Can only be called by controller.\\n     * @param userAddress - address of the recipient of the ETH\\n     * @param amount - amount of ETH (in wei)\\n     */\\n    function sendETHRewards(address userAddress, uint256 amount)\\n        external\\n        override\\n        whenNotPaused\\n        onlyController\\n        returns (bool)\\n    {\\n        require(userAddress != address(0), 'FeeVault: ETH to black hole');\\n        require(amount > 0, 'FeeVault: Attempt to send 0 ETH');\\n\\n        emit RewardsSent(ASSET_ETH, userAddress, amount);\\n\\n        // transfer() does not send enough gas for a delegate call to an\\n        // empty receive() function.\\n        (bool success, ) = userAddress.call{value: amount, gas: 2800}('');\\n\\n        // To align behavior with sendTokenRewards\\n        require(success, 'FeeVault: ETH transfer failed');\\n\\n        return success;\\n    }\\n\\n    /**\\n     * @dev Send token rewards to a user. Can only be called by controller.\\n     * @param tokenAddress - address of the token to send\\n     * @param userAddress - address of the recipient of the tokens\\n     * @param amount - amount of the token to send\\n     */\\n    function sendTokenRewards(\\n        address tokenAddress,\\n        address userAddress,\\n        uint256 amount\\n    ) external override whenNotPaused onlyController returns (bool) {\\n        require(userAddress != address(0), 'FeeVault: Token to black hole');\\n        require(amount > 0, 'FeeVault: Attempt to send 0');\\n\\n        emit RewardsSent(tokenAddress, userAddress, amount);\\n\\n        return _sendTokens(tokenAddress, userAddress, amount);\\n    }\\n\\n    /**\\n     * @notice Recover ERC20 tokens sent to contract.  This can only be called\\n     *      by the governor.\\n     * @param tokenAddress - address of the token to recover\\n     * @param tokenAmount - amount of the token to recover\\n     * @param toAddress - address of the recipient of the tokens\\n     */\\n    function recoverERC20(\\n        address tokenAddress,\\n        uint256 tokenAmount,\\n        address toAddress\\n    ) external override onlyGovernor whenNotPaused returns (bool) {\\n        return _sendTokens(tokenAddress, toAddress, tokenAmount);\\n    }\\n\\n    /**\\n     * @notice Set series address\\n     */\\n    function setController(address controllerAddress)\\n        external\\n        override\\n        onlyGovernor\\n    {\\n        emit NewController(controllerAddress);\\n        controller = controllerAddress;\\n    }\\n\\n    /**\\n     * @notice Pause all funds movement functionality\\n     */\\n    function pause() external override onlyGovernor {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Pause all funds movement functionality\\n     */\\n    function unpause() external override onlyGovernor {\\n        _unpause();\\n    }\\n\\n    // @dev Allow this contract to receive ETH\\n    receive() external payable {}\\n\\n    ///\\n    /// Internals\\n    ///\\n\\n    function _sendTokens(\\n        address tokenAddress,\\n        address toAddress,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        IERC20Upgradeable(tokenAddress).safeTransfer(toAddress, amount);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x2309a2a28209bd3c0195e30c674af7372848f146d68bb14d485b48931bfb2ee9\",\"license\":\"MIT\"},\"contracts/staking/ISeason.sol\":{\"content\":\"/*\\n * Origin Protocol\\n * https://originprotocol.com\\n *\\n * Released under the MIT license\\n * SPDX-License-Identifier: MIT\\n * https://github.com/OriginProtocol/nft-launchpad\\n *\\n * Copyright 2022 Origin Protocol, Inc\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in\\n * all copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n * SOFTWARE.\\n */\\n\\npragma solidity ^0.8.4;\\n\\ninterface ISeason {\\n    function claimEndTime() external view returns (uint256);\\n\\n    function lockStartTime() external view returns (uint256);\\n\\n    function endTime() external view returns (uint256);\\n\\n    function startTime() external view returns (uint256);\\n\\n    function getTotalPoints() external view returns (uint128);\\n\\n    function getPoints(address userAddress) external view returns (uint128);\\n\\n    function expectedRewards(address userAddress)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function pointsInTime(uint256 amount, uint256 blockStamp)\\n        external\\n        view\\n        returns (uint128);\\n\\n    function claim(address userAddress) external returns (uint256, uint256);\\n\\n    function stake(address userAddress, uint256 amount)\\n        external\\n        returns (uint128);\\n\\n    function unstake(address userAddress) external returns (uint256, uint256);\\n\\n    function bootstrap(uint256 initialSupply) external;\\n}\\n\",\"keccak256\":\"0xd1e964e5bc3c437397d0eb6b69fd31dc8291292aae44946ca892d0cd2675145e\",\"license\":\"MIT\"},\"contracts/staking/Season.sol\":{\"content\":\"/*\\n * Origin Protocol\\n * https://originprotocol.com\\n *\\n * Released under the MIT license\\n * SPDX-License-Identifier: MIT\\n * https://github.com/OriginProtocol/nft-launchpad\\n *\\n * Copyright 2022 Origin Protocol, Inc\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in\\n * all copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n * SOFTWARE.\\n */\\npragma solidity ^0.8.4;\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport {ISeason} from './ISeason.sol';\\nimport {ISeries} from './Series.sol';\\n\\n/**\\n * @title Story Season staking contract\\n * @notice Season logic contract to calculate rewards of stakers\\n */\\ncontract Season is ISeason {\\n    struct User {\\n        bool exists;\\n        uint128 points;\\n    }\\n\\n    struct SeasonMeta {\\n        bool bootstrapped;\\n        bool snapshotTaken;\\n        uint128 totalPoints;\\n    }\\n\\n    // Final rewards values taken at end of season\\n    struct Snapshot {\\n        uint128 rewardETH;\\n        uint128 rewardOGN;\\n    }\\n\\n    ISeries public immutable series;\\n\\n    uint256 public immutable override startTime;\\n    uint256 public immutable override lockStartTime;\\n    uint256 public immutable override endTime;\\n    uint256 public immutable override claimEndTime;\\n\\n    SeasonMeta public season;\\n    Snapshot public snapshot;\\n    mapping(address => User) public users;\\n\\n    /**\\n     * @dev User has staked\\n     * @param userAddress - address of the user\\n     * @param amount - amount of OGN staked\\n     * @param points - points user received for this stake\\n     */\\n    event Stake(\\n        address indexed userAddress,\\n        uint256 indexed amount,\\n        uint256 points\\n    );\\n\\n    /**\\n     * @dev User has unstaked\\n     * @param userAddress - address of the user\\n     */\\n    event Unstake(address indexed userAddress);\\n\\n    /**\\n     * @dev Staking period has ended and reward snapshot taken\\n     * @param totalRewardETH - Total ETH reward to split amongst stakers\\n     * @param totalRewardOGN - Total OGN reward to split amongst stakers\\n     */\\n    event Finale(uint256 totalRewardETH, uint256 totalRewardOGN);\\n\\n    /**\\n     * @param series_ - The Series staking and registry contract\\n     * @param startTime_ - Timestamp starting this season\\n     * @param lockStartTime_ - Timestamp at which new stakes are no longer\\n            accepted\\n     * @param endTime_ - Timestamp ending this season\\n     * @param claimEndTime_ - Timestamp at which users can no longer claim\\n     *      profit share and rewards\\n     */\\n    constructor(\\n        address series_,\\n        uint256 startTime_,\\n        uint256 lockStartTime_,\\n        uint256 endTime_,\\n        uint256 claimEndTime_\\n    ) {\\n        series = ISeries(series_);\\n        startTime = startTime_;\\n        endTime = endTime_;\\n        lockStartTime = lockStartTime_;\\n        claimEndTime = claimEndTime_;\\n\\n        require(startTime_ > block.timestamp, 'Season: Invalid startTime');\\n        require(lockStartTime_ > startTime_, 'Season: Invalid lockStartTime');\\n        require(endTime_ > lockStartTime_, 'Season: Invalid endTime');\\n        require(claimEndTime_ > endTime_, 'Season: Invalid claimEndTime');\\n    }\\n\\n    // @dev only execute if sender is the Series contract\\n    modifier onlySeries() {\\n        require(msg.sender == address(series), 'Season: Not series contract');\\n        _;\\n    }\\n\\n    ///\\n    /// Externals\\n    ///\\n\\n    /**\\n     * @dev Calculate the points a user would receive if they staked at a\\n     *      specific block timestamp.\\n     * @param amount - The amount of OGN they would stake\\n     * @param blockStamp - The block timestamp to calculate for\\n     * @return points. 0 if out of season.\\n     */\\n    function pointsInTime(uint256 amount, uint256 blockStamp)\\n        external\\n        view\\n        override\\n        returns (uint128)\\n    {\\n        return _pointsInTime(amount, blockStamp);\\n    }\\n\\n    /**\\n     * @notice Total points for a user's stake\\n     * @param userAddress - address for which to return their points\\n     * @return total points\\n     */\\n    function getPoints(address userAddress)\\n        external\\n        view\\n        override\\n        returns (uint128)\\n    {\\n        User memory user = _initMemUser(userAddress);\\n        return user.points;\\n    }\\n\\n    /**\\n     * @notice Total points of all stakes\\n     * @return total points of all users' stakes\\n     */\\n    function getTotalPoints() external view override returns (uint128) {\\n        if (season.bootstrapped) {\\n            return season.totalPoints;\\n        } else if (block.timestamp >= startTime) {\\n            // Any new stakes should trigger a bootstrap using these same\\n            // numbers.  This is just a convenience for early season fetch\\n            // before new stakes.\\n            uint256 stakedOGN = series.totalSupply();\\n            return _pointsInTime(stakedOGN, startTime);\\n        }\\n\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Return the expected rewards for a user.\\n     * @dev This will return zero values if outside the claim period.\\n     *\\n     * @param userAddress - Address for the user to calculate\\n     * @return ethShare - Amount of ETH a user would receive if claimed now\\n     * @return ognRewards - Amount of OGN a user would receive if claimed now\\n     */\\n    function expectedRewards(address userAddress)\\n        external\\n        view\\n        override\\n        returns (uint256, uint256)\\n    {\\n        if (\\n            block.timestamp < endTime ||\\n            block.timestamp >= claimEndTime ||\\n            season.totalPoints == 0\\n        ) {\\n            return (0, 0);\\n        }\\n\\n        User memory user = _initMemUser(userAddress);\\n\\n        // Include the vault balance if it hasn't been collected\\n        address vault = series.vault();\\n        uint256 ethBalance = season.snapshotTaken\\n            ? snapshot.rewardETH\\n            : vault.balance;\\n        uint256 ognBalance = season.snapshotTaken\\n            ? snapshot.rewardOGN\\n            : IERC20(series.ogn()).balanceOf(vault);\\n\\n        uint256 ethShare = _calculateShare(user.points, ethBalance);\\n        uint256 ognRewards = _calculateShare(user.points, ognBalance);\\n\\n        return (ethShare, ognRewards);\\n    }\\n\\n    /**\\n     * @notice Stake OGN for a share of ETH profits and OGN rewards\\n     * @dev This may be called multiple times and the amount returned will\\n     *      be for the user's totals, not the amount for this specific call.\\n     *\\n     * @param userAddress - the user staking their OGN\\n     * @param amount - the amount of (st)OGN being staked\\n     * @return total points received for the user's stake\\n     */\\n    function stake(address userAddress, uint256 amount)\\n        external\\n        override\\n        onlySeries\\n        returns (uint128)\\n    {\\n        require(amount > 0, 'Season: No incoming OGN');\\n        // Bootstrapping should have happened before we got here\\n        require(season.bootstrapped, 'Season: Season not bootstrapped.');\\n\\n        // calculate stake points\\n        uint128 points = _pointsInTime(amount, block.timestamp);\\n\\n        User memory user = _initMemUser(userAddress);\\n\\n        // Update season and user points\\n        season.totalPoints += points;\\n        user.points += points;\\n\\n        // Store user (updates may have also come from _initMemUser())\\n        users[userAddress] = user;\\n\\n        emit Stake(userAddress, amount, user.points);\\n\\n        return user.points;\\n    }\\n\\n    /**\\n     * @notice Calculate and return  ETH profit share and OGN rewards and zero\\n     *      out the user's stake points.\\n     *\\n     * @param userAddress - the user staking their OGN\\n     * @return Amount of ETH profit share to pay the user\\n     * @return Amount of OGN rewards to pay the user\\n     */\\n    function claim(address userAddress)\\n        external\\n        override\\n        onlySeries\\n        returns (uint256, uint256)\\n    {\\n        // Do not unstake and claim if not in claim period\\n        if (block.timestamp < endTime) {\\n            return (0, 0);\\n        }\\n\\n        return _unstake(userAddress);\\n    }\\n\\n    /**\\n     * @notice Calculate and return  ETH profit share and OGN rewards and zero\\n     *      out the user's stake points.\\n     *\\n     * @param userAddress - the user staking their OGN\\n     * @return Amount of ETH profit share to pay the user\\n     * @return Amount of OGN rewards to pay the user\\n     */\\n    function unstake(address userAddress)\\n        external\\n        override\\n        onlySeries\\n        returns (uint256, uint256)\\n    {\\n        return _unstake(userAddress);\\n    }\\n\\n    /**\\n     * @dev Set the initial total points, potentially rolling over stake\\n     *      totals from the previous season.\\n     * @param initialSupply - The amount of staked OGN at the start of the\\n     *      season.\\n     */\\n    function bootstrap(uint256 initialSupply) external override onlySeries {\\n        require(!season.bootstrapped, 'Season: Already bootstrapped');\\n\\n        // Gas favorable update\\n        SeasonMeta memory meta = season;\\n        meta.bootstrapped = true;\\n        meta.totalPoints = _pointsInTime(initialSupply, startTime);\\n        season = meta;\\n    }\\n\\n    ///\\n    /// Internals\\n    ///\\n\\n    /**\\n     * @dev creates the final snapshot of rewards totals entitled to the\\n     *      stakers of this period. This only happens once at the end of the\\n     *      season.  This constitutes the full amount of rewards for this\\n     *      season.  WARNING: This should not be called before endTime or a\\n     *      snapshot will be taken and frozen too early, leaving rewards on\\n     *      the table.\\n     */\\n    function _snapshot() internal {\\n        address vault = series.vault();\\n        Snapshot memory snap = Snapshot(\\n            uint128(vault.balance),\\n            uint128(IERC20(series.ogn()).balanceOf(vault))\\n        );\\n\\n        emit Finale(snap.rewardETH, snap.rewardOGN);\\n\\n        season.snapshotTaken = true;\\n        snapshot = snap;\\n    }\\n\\n    /**\\n     * @dev Calculate a user's rewards amounts and clear stake points\\n     *\\n     * @param userAddress - The address of the user account\\n     * @return Amount of ETH entitlement\\n     * @return Amount of OGN entitlement\\n     */\\n    function _unstake(address userAddress) internal returns (uint256, uint256) {\\n        if (!season.bootstrapped) {\\n            // Unable to calculate rewards because we aren't bootstrapped\\n            require(block.timestamp < endTime, 'Season: Not bootstrapped.');\\n\\n            // Nothing to unstake, no rewards to give. Season can still be\\n            // bootstrapped by Series with a new stake.\\n            return (0, 0);\\n        }\\n\\n        User memory user = _initMemUser(userAddress);\\n\\n        uint256 rewardETH = 0;\\n        uint256 rewardOGN = 0;\\n\\n        // Only remove points from season totals if season has not ended to\\n        // preserve shares proportion calculation\\n        if (block.timestamp < endTime) {\\n            season.totalPoints -= user.points;\\n        } else {\\n            // Within claim period\\n            if (block.timestamp < claimEndTime) {\\n                (rewardETH, rewardOGN) = _calcRewards(user.points);\\n            }\\n        }\\n\\n        // Zero out user points\\n        users[userAddress] = User(true, 0);\\n\\n        emit Unstake(userAddress);\\n\\n        return (rewardETH, rewardOGN);\\n    }\\n\\n    /**\\n     * @dev Calculate the points a user would receive if they staked at a\\n     *      specific block timestamp.\\n     *\\n     * @param amount - The amount of OGN they would stake\\n     * @param blockStamp - The block timestamp to calculate for\\n     * @return points\\n     */\\n    function _pointsInTime(uint256 amount, uint256 blockStamp)\\n        internal\\n        view\\n        returns (uint128)\\n    {\\n        if (amount == 0 || blockStamp >= lockStartTime) {\\n            return 0;\\n        }\\n\\n        // Pre-season stake points start at startTime\\n        uint256 effectiveStamp = blockStamp < startTime\\n            ? startTime\\n            : blockStamp;\\n\\n        // Remainder ignored intentionally, only full days are counted\\n        uint256 stakeDays = (endTime - effectiveStamp) / 1 days;\\n\\n        // Imprecise math intentional since resolution is only to 1 day\\n        uint256 points = amount * stakeDays;\\n\\n        require(points < type(uint128).max, 'Season: Points overflow');\\n\\n        return uint128(points);\\n    }\\n\\n    /**\\n     * @dev Claim and return amounts of ETH profit share and OGN rewards\\n     *      entitled to the user.\\n     *\\n     * @param userPoints - a user's points to use for rewards calculation\\n     * @return userRewardETH - Amount of ETH share a user is entitled to\\n     * @return userRewardOGN - Amount of OGN rewards a user is entitled to\\n     */\\n    function _calcRewards(uint256 userPoints)\\n        internal\\n        returns (uint256, uint256)\\n    {\\n        if (userPoints == 0) {\\n            return (0, 0);\\n        }\\n\\n        // Get final rewards totals\\n        if (!season.snapshotTaken && block.timestamp >= endTime) {\\n            _snapshot();\\n        }\\n\\n        uint256 userRewardETH = _calculateShare(\\n            userPoints,\\n            uint256(snapshot.rewardETH)\\n        );\\n        uint256 userRewardOGN = _calculateShare(\\n            userPoints,\\n            uint256(snapshot.rewardOGN)\\n        );\\n\\n        return (userRewardETH, userRewardOGN);\\n    }\\n\\n    /**\\n     * @dev Initialize a user, potentially rolling over stakes from the\\n     *      previous season. NOTE: This does not write to storage.\\n     *\\n     * @return initialized User\\n     */\\n    function _initMemUser(address userAddress)\\n        internal\\n        view\\n        returns (User memory)\\n    {\\n        User memory user = users[userAddress];\\n        ISeries staking = ISeries(series);\\n\\n        // If the user is new, the user might be rolling over from a previous\\n        // season.  Check for pre-existing stakes on Season.\\n        if (!user.exists) {\\n            uint256 latestStakeTime = staking.latestStakeTime(userAddress);\\n\\n            // Do not assign points to a user that staked in a future season.\\n            // This could happen if a user stakes in the next season while\\n            // this one is in claim period.\\n            if (latestStakeTime > 0 && latestStakeTime <= startTime) {\\n                uint256 stakeBalance = staking.balanceOf(userAddress);\\n                user.points = _pointsInTime(stakeBalance, startTime);\\n            }\\n\\n            // Mark the user as existing so we do not repeat this step\\n            user.exists = true;\\n        }\\n\\n        return user;\\n    }\\n\\n    /**\\n     * @dev Calculate the given user's share of a given value.\\n     *\\n     * @return share the user is currently entitled to of given rewards\\n     */\\n    function _calculateShare(uint256 userPoints, uint256 totalRewards)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return (totalRewards * userPoints) / uint256(season.totalPoints);\\n    }\\n}\\n\",\"keccak256\":\"0xa9bdfe59611e327f6c5ab3075bf13f0c940806d5ac9141852292f33c9a87cdad\",\"license\":\"MIT\"},\"contracts/staking/Series.sol\":{\"content\":\"/*\\n * Origin Protocol\\n * https://originprotocol.com\\n *\\n * Released under the MIT license\\n * SPDX-License-Identifier: MIT\\n * https://github.com/OriginProtocol/nft-launchpad\\n *\\n * Copyright 2022 Origin Protocol, Inc\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in\\n * all copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n * SOFTWARE.\\n */\\n\\npragma solidity ^0.8.4;\\n\\nimport {AddressUpgradeable as Address} from '@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol';\\nimport {Initializable} from '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport {IERC20Upgradeable as IERC20} from '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\n\\nimport {Governable} from '../governance/Governable.sol';\\nimport {IFeeVault} from './FeeVault.sol';\\nimport {ISeason} from './ISeason.sol';\\n\\ninterface ISeries {\\n    function ogn() external view returns (address);\\n\\n    function vault() external view returns (address);\\n\\n    function currentClaimingIndex() external view returns (uint256);\\n\\n    function currentStakingIndex() external view returns (uint256);\\n\\n    function liveSeason() external view returns (uint256);\\n\\n    function expectedClaimingSeason() external view returns (address);\\n\\n    function expectedStakingSeason() external view returns (address);\\n\\n    function latestStakeTime(address userAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function balanceOf(address userAddress) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function claim() external returns (uint256, uint256);\\n\\n    function stake(uint256 amount) external returns (uint256, uint256);\\n\\n    function unstake() external returns (uint256);\\n\\n    function popSeason() external;\\n\\n    function pushSeason(address season) external;\\n\\n    function bootstrapSeason(uint256 seasonIndex, uint256 totalStaked) external;\\n}\\n\\n/**\\n * @title Story Series staking contract\\n * @notice Primary interaction OGN staking contract for Story profit sharing\\n *      and rewards.\\n */\\ncontract Series is Initializable, Governable, ISeries {\\n    address public override vault;\\n    address public override ogn;\\n\\n    address[] public seasons;\\n    uint256 public override currentStakingIndex;\\n    uint256 public override currentClaimingIndex;\\n    uint256 private totalStakedOGN;\\n\\n    mapping(address => uint256) private stakedOGN;\\n    mapping(address => uint256) private userLastStakingTime;\\n\\n    /**\\n     * @dev A new season has been registered\\n     * @param number - The season ID (1-indexed)\\n     * @param season - The address of the new season\\n     */\\n    event NewSeason(uint256 indexed number, address indexed season);\\n\\n    /**\\n     * @dev A season has started\\n     * @param number - The season ID (1-indexed)\\n     * @param season - The address of the new season\\n     */\\n    event SeasonStart(uint256 indexed number, address indexed season);\\n\\n    /**\\n     * @dev A season has been cancelled and removed\\n     * @param season - The address of the new season\\n     */\\n    event SeasonCancelled(address indexed season);\\n\\n    // @dev only execute if there's an active season set\\n    modifier requireActiveSeason() {\\n        require(seasons.length > 0, 'Series: No active season');\\n        _;\\n    }\\n\\n    /**\\n     * @param ogn_ - Address for the OGN token\\n     * @param vault_ - Address for the FeeVault\\n     */\\n    function initialize(address ogn_, address vault_) external initializer {\\n        require(ogn_ != address(0), 'Series: Zero address: OGN');\\n        require(vault_ != address(0), 'Series: Zero address: Vault');\\n        ogn = ogn_;\\n        vault = vault_;\\n    }\\n\\n    ///\\n    /// Externals\\n    ///\\n\\n    /**\\n     * @notice The current \\\"live\\\" season (earliest non-ended season)\\n     * @return index of the live season\\n     */\\n    function liveSeason() external view override returns (uint256) {\\n        if (seasons.length <= 1) {\\n            return 0;\\n        }\\n\\n        for (uint256 i = seasons.length; i > 0; i--) {\\n            uint256 idx = i - 1;\\n\\n            if (block.timestamp >= ISeason(seasons[idx]).startTime()) {\\n                return idx;\\n            }\\n        }\\n\\n        return currentStakingIndex;\\n    }\\n\\n    /**\\n     * @notice The staking season, should stake() be called.  This takes into\\n     * account currentStakingIndex potentially advancing.\\n     * @return address of the expected claiming season\\n     */\\n    function expectedStakingSeason() external view override returns (address) {\\n        if (seasons.length < 1) {\\n            return address(0);\\n        }\\n\\n        ISeason season = ISeason(seasons[currentStakingIndex]);\\n\\n        if (\\n            block.timestamp >= season.lockStartTime() &&\\n            seasons.length > currentStakingIndex + 1\\n        ) {\\n            return seasons[currentStakingIndex + 1];\\n        }\\n\\n        return seasons[currentStakingIndex];\\n    }\\n\\n    /**\\n     * @notice The claiming season, should claim/unstake be called.  This\\n     * takes into account currentClaimingIndex potentially advancing.\\n     * @return address of the expected claiming season\\n     */\\n    function expectedClaimingSeason() external view override returns (address) {\\n        if (seasons.length < 1) {\\n            return address(0);\\n        }\\n\\n        ISeason season = ISeason(seasons[currentClaimingIndex]);\\n\\n        if (\\n            block.timestamp >= season.claimEndTime() &&\\n            seasons.length > currentClaimingIndex + 1\\n        ) {\\n            return seasons[currentClaimingIndex + 1];\\n        }\\n\\n        return seasons[currentClaimingIndex];\\n    }\\n\\n    /**\\n     * @notice Get the latest stake block timestamp for a user\\n     * @param userAddress - address for which to return their last stake time\\n     * @return timestamp for last stake time for a user (or 0 if none)\\n     */\\n    function latestStakeTime(address userAddress)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return userLastStakingTime[userAddress];\\n    }\\n\\n    /**\\n     * @notice Total staked OGN for a user\\n     * @param userAddress - address for which to return their points\\n     * @return total OGN staked\\n     */\\n    function balanceOf(address userAddress)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return stakedOGN[userAddress];\\n    }\\n\\n    /**\\n     * @notice Total staked OGN of all users\\n     * @return total OGN staked from all users\\n     */\\n    function totalSupply() external view override returns (uint256) {\\n        return totalStakedOGN;\\n    }\\n\\n    /**\\n     * @notice Set the address for the OGN token.\\n     * @dev other contracts reference this value as well\\n     * @param ogn_ - address for the contract\\n     */\\n    function setOGN(address ogn_) external onlyGovernor {\\n        require(ogn_ != address(0), 'Series: Zero address: OGN');\\n        ogn = ogn_;\\n    }\\n\\n    /**\\n     * @notice Set the address for the FeeVault.\\n     * @dev other contracts reference this value as well\\n     * @param vault_ - address for the contract\\n     */\\n    function setVault(address vault_) external onlyGovernor {\\n        require(vault_ != address(0), 'Series: Zero address: FeeVault');\\n        vault = vault_;\\n    }\\n\\n    /**\\n     * @notice Stake OGN for fee sharing and rewards. Users can call this\\n     *      multiple times to add to their stake. This contract must be\\n     *      approved to transfer the given amount of OGN from the user.\\n     *\\n     * @param amount - The amount of OGN to stake\\n     * @return total amount of OGN staked by the user\\n     * @return total points received for the user's entire stake for the\\n     *      staking season\\n     */\\n    function stake(uint256 amount)\\n        external\\n        override\\n        requireActiveSeason\\n        returns (uint256, uint256)\\n    {\\n        require(amount > 0, 'Series: No stake amount');\\n\\n        uint128 stakePoints;\\n        address userAddress = msg.sender;\\n        IERC20 token = IERC20(ogn);\\n        ISeason season = _acquireStakingSeason();\\n\\n        // Transfer OGN to Series\\n        require(\\n            token.transferFrom(userAddress, address(this), amount),\\n            'Series: OGN transfer failed'\\n        );\\n\\n        // Record stake for the user and get their points total for return\\n        stakePoints = season.stake(userAddress, amount);\\n\\n        // Update balances. This must occur after the stake() call to allow\\n        // for clean rollover.  Otherwise, this new balance could be\\n        // considered historical and used as rollover on top of new amount.\\n        stakedOGN[userAddress] += amount;\\n        totalStakedOGN += amount;\\n        userLastStakingTime[userAddress] = block.timestamp;\\n\\n        return (stakedOGN[userAddress], stakePoints);\\n    }\\n\\n    /**\\n     * @notice Unstake previously staked OGN. This will unstake their full\\n     *      OGN stake amount and pay out any rewards (if within a claim period)\\n     *\\n     * @return amount of OGN unstaked\\n     */\\n    function unstake() external override requireActiveSeason returns (uint256) {\\n        address userAddress = msg.sender;\\n        uint256 amount = stakedOGN[userAddress];\\n        ISeason claimSeason = _acquireClaimingSeason();\\n\\n        (uint256 rewardETH, uint256 rewardOGN) = claimSeason.unstake(\\n            userAddress\\n        );\\n\\n        // Make sure to unstake from staking season as well to zero-out user\\n        if (currentClaimingIndex < currentStakingIndex) {\\n            ISeason stakeSeason = ISeason(seasons[currentStakingIndex]);\\n            // Ignored return val because there can't be multiple seasons in\\n            // claim period at one time.  This should return (0,0).\\n            stakeSeason.unstake(userAddress);\\n        }\\n\\n        // Balance updates need to happen after unstake() calls to allow\\n        // rollover calculation to get a user's stake balance.\\n        stakedOGN[userAddress] = 0;\\n        totalStakedOGN -= amount;\\n\\n        // Send rewards to user (if any)\\n        _transferRewards(userAddress, rewardETH, rewardOGN);\\n\\n        // Send staked OGN back to user\\n        require(\\n            IERC20(ogn).transfer(userAddress, amount),\\n            'Series: OGN transfer failed'\\n        );\\n\\n        return amount;\\n    }\\n\\n    /**\\n     * @notice Claim profit share and OGN rewards.\\n     *\\n     * @return claimedETH - amount of ETH profit share claimed\\n     * @return claimedOGN - amount of OGN rewards claimed\\n     */\\n    function claim()\\n        external\\n        override\\n        requireActiveSeason\\n        returns (uint256, uint256)\\n    {\\n        address userAddress = msg.sender;\\n        ISeason season = _acquireClaimingSeason();\\n\\n        (uint256 rewardETH, uint256 rewardOGN) = season.claim(userAddress);\\n\\n        _transferRewards(userAddress, rewardETH, rewardOGN);\\n\\n        return (rewardETH, rewardOGN);\\n    }\\n\\n    /**\\n     * @notice Add a new season.  It will be the last season in the sequence.\\n     *\\n     * @param season - address for the new season\\n     */\\n    function pushSeason(address season) external override onlyGovernor {\\n        require(Address.isContract(season), 'Series: Season not a contract');\\n\\n        ISeason newSeason = ISeason(season);\\n\\n        // If we have seasons to compare, do some sanity checks\\n        if (seasons.length > 0) {\\n            ISeason prevSeason = ISeason(seasons[seasons.length - 1]);\\n\\n            // End time must be after claim period to prevent overlap of claim\\n            // periods\\n            require(\\n                newSeason.endTime() > prevSeason.claimEndTime(),\\n                'Series: Invalid end time'\\n            );\\n\\n            // It's critical the start time begins after the previous season's\\n            // lock start time to avoid advancing early into the staking slot.\\n            // Since its end time is after the lock start time and seasons\\n            // probably shouldn't overlap for clarity sake, we check against\\n            // end time.\\n            require(\\n                newSeason.startTime() >= prevSeason.endTime(),\\n                'Series: Invalid start time'\\n            );\\n        }\\n\\n        seasons.push(season);\\n\\n        emit NewSeason(seasons.length - 1, season);\\n\\n        if (seasons.length == 1) {\\n            ISeason(season).bootstrap(totalStakedOGN);\\n            emit SeasonStart(0, season);\\n        }\\n    }\\n\\n    /**\\n     * @notice Remove the final scheduled season if it is not an active\\n     *      staking season.\\n     */\\n    function popSeason() external override onlyGovernor {\\n        require(seasons.length > 0, 'Series: No seasons to cancel');\\n        require(\\n            currentStakingIndex < seasons.length - 1,\\n            'Series: Season is active'\\n        );\\n\\n        address cancelled = seasons[seasons.length - 1];\\n\\n        // Remove the last element\\n        seasons.pop();\\n\\n        emit SeasonCancelled(cancelled);\\n    }\\n\\n    /**\\n     * @notice Manually bootstrap a season.  This should only be used in the\\n     *      rare case a season receives no new stakes, so was never\\n     *      bootstraped.\\n     * @param totalStaked - The amount of totalStakedOGN to send to\\n     *      Season.bootstrap()\\n     */\\n    function bootstrapSeason(uint256 seasonIndex, uint256 totalStaked)\\n        external\\n        override\\n        onlyGovernor\\n    {\\n        require(seasonIndex < seasons.length, 'Series: Season does not exist');\\n\\n        ISeason season = ISeason(seasons[seasonIndex]);\\n\\n        require(\\n            block.timestamp >= season.lockStartTime(),\\n            'Series: Not locked'\\n        );\\n\\n        season.bootstrap(totalStaked);\\n    }\\n\\n    ///\\n    /// Internals\\n    ///\\n\\n    /**\\n     * @dev Return the season to use for staking, advancing if necessary\\n     * @return staking season\\n     */\\n    function _acquireStakingSeason() internal returns (ISeason) {\\n        ISeason season = ISeason(seasons[currentStakingIndex]);\\n\\n        // Locked seasons can accept stakes but will not award points,\\n        // therefore the staker will receive no rewards.  If we have another\\n        // Season available for (pre)staking, advance the index and use that\\n        // for staking operations.\\n        if (\\n            block.timestamp >= season.lockStartTime() &&\\n            seasons.length > currentStakingIndex + 1\\n        ) {\\n            currentStakingIndex += 1;\\n            season = ISeason(seasons[currentStakingIndex]);\\n            season.bootstrap(totalStakedOGN);\\n            emit SeasonStart(currentStakingIndex, seasons[currentStakingIndex]);\\n        }\\n\\n        return season;\\n    }\\n\\n    /**\\n     * @dev Return the season to use for claiming, advancing if necessary\\n     * @return claiming season\\n     */\\n    function _acquireClaimingSeason() internal returns (ISeason) {\\n        ISeason season = ISeason(seasons[currentClaimingIndex]);\\n\\n        // If the claim period has ended, advance to the next season, if\\n        // available.\\n        if (\\n            block.timestamp >= season.claimEndTime() &&\\n            seasons.length > currentClaimingIndex + 1\\n        ) {\\n            currentClaimingIndex += 1;\\n            season = ISeason(seasons[currentClaimingIndex]);\\n        }\\n\\n        return season;\\n    }\\n\\n    /**\\n     * @dev Transfer the given ETH and OGN to the given user from the vault\\n     * @param userAddress - Recipient of the rewards\\n     * @param rewardETH - Amount of ETH to transfer\\n     * @param rewardOGN - Amount of OGN to transfer\\n     */\\n    function _transferRewards(\\n        address userAddress,\\n        uint256 rewardETH,\\n        uint256 rewardOGN\\n    ) internal {\\n        IFeeVault rewards = IFeeVault(vault);\\n\\n        if (rewardETH > 0) {\\n            rewards.sendETHRewards(userAddress, rewardETH);\\n        }\\n\\n        if (rewardOGN > 0) {\\n            rewards.sendTokenRewards(ogn, userAddress, rewardOGN);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7c063c049346100a0cae9f4bf217dea7e15168a555e54390758c264b78cac2af\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "events": {
      "Finale(uint256,uint256)": {
        "details": "Staking period has ended and reward snapshot taken",
        "params": {
          "totalRewardETH": "- Total ETH reward to split amongst stakers",
          "totalRewardOGN": "- Total OGN reward to split amongst stakers"
        }
      },
      "Stake(address,uint256,uint256)": {
        "details": "User has staked",
        "params": {
          "amount": "- amount of OGN staked",
          "points": "- points user received for this stake",
          "userAddress": "- address of the user"
        }
      },
      "Unstake(address)": {
        "details": "User has unstaked",
        "params": {
          "userAddress": "- address of the user"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "bootstrap(uint256)": {
        "details": "Set the initial total points, potentially rolling over stake      totals from the previous season.",
        "params": {
          "initialSupply": "- The amount of staked OGN at the start of the      season."
        }
      },
      "claim(address)": {
        "params": {
          "userAddress": "- the user staking their OGN"
        },
        "returns": {
          "_0": "Amount of ETH profit share to pay the user",
          "_1": "Amount of OGN rewards to pay the user"
        }
      },
      "constructor": {
        "params": {
          "claimEndTime_": "- Timestamp at which users can no longer claim      profit share and rewards",
          "endTime_": "- Timestamp ending this season",
          "lockStartTime_": "- Timestamp at which new stakes are no longer accepted",
          "series_": "- The Series staking and registry contract",
          "startTime_": "- Timestamp starting this season"
        }
      },
      "expectedRewards(address)": {
        "details": "This will return zero values if outside the claim period.",
        "params": {
          "userAddress": "- Address for the user to calculate"
        },
        "returns": {
          "_0": "ethShare - Amount of ETH a user would receive if claimed now",
          "_1": "ognRewards - Amount of OGN a user would receive if claimed now"
        }
      },
      "getPoints(address)": {
        "params": {
          "userAddress": "- address for which to return their points"
        },
        "returns": {
          "_0": "total points"
        }
      },
      "getTotalPoints()": {
        "returns": {
          "_0": "total points of all users' stakes"
        }
      },
      "pointsInTime(uint256,uint256)": {
        "details": "Calculate the points a user would receive if they staked at a      specific block timestamp.",
        "params": {
          "amount": "- The amount of OGN they would stake",
          "blockStamp": "- The block timestamp to calculate for"
        },
        "returns": {
          "_0": "points. 0 if out of season."
        }
      },
      "stake(address,uint256)": {
        "details": "This may be called multiple times and the amount returned will      be for the user's totals, not the amount for this specific call.",
        "params": {
          "amount": "- the amount of (st)OGN being staked",
          "userAddress": "- the user staking their OGN"
        },
        "returns": {
          "_0": "total points received for the user's stake"
        }
      },
      "unstake(address)": {
        "params": {
          "userAddress": "- the user staking their OGN"
        },
        "returns": {
          "_0": "Amount of ETH profit share to pay the user",
          "_1": "Amount of OGN rewards to pay the user"
        }
      }
    },
    "title": "Story Season staking contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claim(address)": {
        "notice": "Calculate and return  ETH profit share and OGN rewards and zero      out the user's stake points."
      },
      "expectedRewards(address)": {
        "notice": "Return the expected rewards for a user."
      },
      "getPoints(address)": {
        "notice": "Total points for a user's stake"
      },
      "getTotalPoints()": {
        "notice": "Total points of all stakes"
      },
      "stake(address,uint256)": {
        "notice": "Stake OGN for a share of ETH profits and OGN rewards"
      },
      "unstake(address)": {
        "notice": "Calculate and return  ETH profit share and OGN rewards and zero      out the user's stake points."
      }
    },
    "notice": "Season logic contract to calculate rewards of stakers",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13167,
        "contract": "contracts/staking/Season.sol:Season",
        "label": "season",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(SeasonMeta)13144_storage"
      },
      {
        "astId": 13170,
        "contract": "contracts/staking/Season.sol:Season",
        "label": "snapshot",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Snapshot)13149_storage"
      },
      {
        "astId": 13175,
        "contract": "contracts/staking/Season.sol:Season",
        "label": "users",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(User)13137_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(User)13137_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Season.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)13137_storage"
      },
      "t_struct(SeasonMeta)13144_storage": {
        "encoding": "inplace",
        "label": "struct Season.SeasonMeta",
        "members": [
          {
            "astId": 13139,
            "contract": "contracts/staking/Season.sol:Season",
            "label": "bootstrapped",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 13141,
            "contract": "contracts/staking/Season.sol:Season",
            "label": "snapshotTaken",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 13143,
            "contract": "contracts/staking/Season.sol:Season",
            "label": "totalPoints",
            "offset": 2,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Snapshot)13149_storage": {
        "encoding": "inplace",
        "label": "struct Season.Snapshot",
        "members": [
          {
            "astId": 13146,
            "contract": "contracts/staking/Season.sol:Season",
            "label": "rewardETH",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 13148,
            "contract": "contracts/staking/Season.sol:Season",
            "label": "rewardOGN",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(User)13137_storage": {
        "encoding": "inplace",
        "label": "struct Season.User",
        "members": [
          {
            "astId": 13134,
            "contract": "contracts/staking/Season.sol:Season",
            "label": "exists",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 13136,
            "contract": "contracts/staking/Season.sol:Season",
            "label": "points",
            "offset": 1,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      }
    }
  }
}