{
  "address": "0x12e929eb29ED2307A28EB3E494062C58c32AaF7D",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernorshipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "season",
          "type": "address"
        }
      ],
      "name": "NewSeason",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorshipTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "season",
          "type": "address"
        }
      ],
      "name": "SeasonCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "season",
          "type": "address"
        }
      ],
      "name": "SeasonStart",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "seasonIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalStaked",
          "type": "uint256"
        }
      ],
      "name": "bootstrapSeason",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentClaimingIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentStakingIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "expectedClaimingSeason",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "expectedStakingSeason",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ogn_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vault_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "latestStakeTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liveSeason",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ogn",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "popSeason",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "season",
          "type": "address"
        }
      ],
      "name": "pushSeason",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "seasons",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ogn_",
          "type": "address"
        }
      ],
      "name": "setOGN",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault_",
          "type": "address"
        }
      ],
      "name": "setVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unstake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xac648e83916116713fefa2fefb60b3dbbf3c1b361222fc039eddc7699612f3c5",
  "receipt": {
    "to": null,
    "from": "0xc77926a061E782b219aaF2248023dfdc3d54b0e4",
    "contractAddress": "0x12e929eb29ED2307A28EB3E494062C58c32AaF7D",
    "transactionIndex": 19,
    "gasUsed": "1841836",
    "logsBloom": "0x
    "blockHash": "0x9d10331f3b72ce080dae7ecd83543699f092c94bdc7d2157dd7a6c9e0926f049",
    "transactionHash": "0xac648e83916116713fefa2fefb60b3dbbf3c1b361222fc039eddc7699612f3c5",
    "logs": [
      {
        "transactionIndex": 19,
        "blockNumber": 15103084,
        "transactionHash": "0xac648e83916116713fefa2fefb60b3dbbf3c1b361222fc039eddc7699612f3c5",
        "address": "0x12e929eb29ED2307A28EB3E494062C58c32AaF7D",
        "topics": [
          "0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c77926a061e782b219aaf2248023dfdc3d54b0e4"
        ],
        "data": "0x",
        "logIndex": 44,
        "blockHash": "0x9d10331f3b72ce080dae7ecd83543699f092c94bdc7d2157dd7a6c9e0926f049"
      }
    ],
    "blockNumber": 15103084,
    "cumulativeGasUsed": "4223832",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "dff4d4389c4eb41a5891ad25f05e3896",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"season\",\"type\":\"address\"}],\"name\":\"NewSeason\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorshipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"season\",\"type\":\"address\"}],\"name\":\"SeasonCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"season\",\"type\":\"address\"}],\"name\":\"SeasonStart\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seasonIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"}],\"name\":\"bootstrapSeason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentClaimingIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentStakingIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expectedClaimingSeason\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expectedStakingSeason\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ogn_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"latestStakeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liveSeason\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ogn\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"popSeason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"season\",\"type\":\"address\"}],\"name\":\"pushSeason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"seasons\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ogn_\",\"type\":\"address\"}],\"name\":\"setOGN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault_\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"NewSeason(uint256,address)\":{\"details\":\"A new season has been registered\",\"params\":{\"number\":\"- The season ID (1-indexed)\",\"season\":\"- The address of the new season\"}},\"SeasonCancelled(address)\":{\"details\":\"A season has been cancelled and removed\",\"params\":{\"season\":\"- The address of the new season\"}},\"SeasonStart(uint256,address)\":{\"details\":\"A season has started\",\"params\":{\"number\":\"- The season ID (1-indexed)\",\"season\":\"- The address of the new season\"}}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"params\":{\"userAddress\":\"- address for which to return their points\"},\"returns\":{\"_0\":\"total OGN staked\"}},\"bootstrapSeason(uint256,uint256)\":{\"params\":{\"totalStaked\":\"- The amount of totalStakedOGN to send to      Season.bootstrap()\"}},\"claim()\":{\"returns\":{\"_0\":\"claimedETH - amount of ETH profit share claimed\",\"_1\":\"claimedOGN - amount of OGN rewards claimed\"}},\"claimGovernance()\":{\"details\":\"Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor.\"},\"expectedClaimingSeason()\":{\"returns\":{\"_0\":\"address of the expected claiming season\"}},\"expectedStakingSeason()\":{\"returns\":{\"_0\":\"address of the expected claiming season\"}},\"governor()\":{\"details\":\"Returns the address of the current Governor.\"},\"initialize(address,address)\":{\"params\":{\"ogn_\":\"- Address for the OGN token\",\"vault_\":\"- Address for the FeeVault\"}},\"isGovernor()\":{\"details\":\"Returns true if the caller is the current Governor.\"},\"latestStakeTime(address)\":{\"params\":{\"userAddress\":\"- address for which to return their last stake time\"},\"returns\":{\"_0\":\"timestamp for last stake time for a user (or 0 if none)\"}},\"liveSeason()\":{\"returns\":{\"_0\":\"index of the live season\"}},\"pushSeason(address)\":{\"params\":{\"season\":\"- address for the new season\"}},\"setOGN(address)\":{\"details\":\"other contracts reference this value as well\",\"params\":{\"ogn_\":\"- address for the contract\"}},\"setVault(address)\":{\"details\":\"other contracts reference this value as well\",\"params\":{\"vault_\":\"- address for the contract\"}},\"stake(uint256)\":{\"params\":{\"amount\":\"- The amount of OGN to stake\"},\"returns\":{\"_0\":\"total amount of OGN staked by the user\",\"_1\":\"total points received for the user's entire stake for the      staking season\"}},\"totalSupply()\":{\"returns\":{\"_0\":\"total OGN staked from all users\"}},\"transferGovernance(address)\":{\"details\":\"Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete\",\"params\":{\"_newGovernor\":\"Address of the new Governor\"}},\"unstake()\":{\"returns\":{\"_0\":\"amount of OGN unstaked\"}}},\"title\":\"Story Series staking contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceOf(address)\":{\"notice\":\"Total staked OGN for a user\"},\"bootstrapSeason(uint256,uint256)\":{\"notice\":\"Manually bootstrap a season.  This should only be used in the      rare case a season receives no new stakes, so was never      bootstraped.\"},\"claim()\":{\"notice\":\"Claim profit share and OGN rewards.\"},\"expectedClaimingSeason()\":{\"notice\":\"The claiming season, should claim/unstake be called.  This takes into account currentClaimingIndex potentially advancing.\"},\"expectedStakingSeason()\":{\"notice\":\"The staking season, should stake() be called.  This takes into account currentStakingIndex potentially advancing.\"},\"latestStakeTime(address)\":{\"notice\":\"Get the latest stake block timestamp for a user\"},\"liveSeason()\":{\"notice\":\"The current \\\"live\\\" season (earliest non-ended season)\"},\"popSeason()\":{\"notice\":\"Remove the final scheduled season if it is not an active      staking season.\"},\"pushSeason(address)\":{\"notice\":\"Add a new season.  It will be the last season in the sequence.\"},\"setOGN(address)\":{\"notice\":\"Set the address for the OGN token.\"},\"setVault(address)\":{\"notice\":\"Set the address for the FeeVault.\"},\"stake(uint256)\":{\"notice\":\"Stake OGN for fee sharing and rewards. Users can call this      multiple times to add to their stake. This contract must be      approved to transfer the given amount of OGN from the user.\"},\"totalSupply()\":{\"notice\":\"Total staked OGN of all users\"},\"unstake()\":{\"notice\":\"Unstake previously staked OGN. This will unstake their full      OGN stake amount and pay out any rewards (if within a claim period)\"}},\"notice\":\"Primary interaction OGN staking contract for Story profit sharing      and rewards.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/Series.sol\":\"Series\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf93da311a3b34a8363a759c404d575746fa38351fb29ecd646c608e27219ebec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"contracts/governance/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OUSD Governable Contract\\n * @dev Copy of the openzeppelin Ownable.sol contract with nomenclature change\\n *      from owner to governor and renounce methods removed. Does not use\\n *      Context.sol like Ownable.sol does for simplification.\\n * @author Origin Protocol Inc\\n */\\nabstract contract Governable {\\n    // Storage position of the owner and pendingOwner of the contract\\n    // keccak256(\\\"OUSD.governor\\\");\\n    bytes32 private constant governorPosition =\\n        0x7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a;\\n\\n    // keccak256(\\\"OUSD.pending.governor\\\");\\n    bytes32 private constant pendingGovernorPosition =\\n        0x44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db;\\n\\n    // keccak256(\\\"OUSD.reentry.status\\\");\\n    bytes32 private constant reentryStatusPosition =\\n        0x53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac4535;\\n\\n    // See OpenZeppelin ReentrancyGuard implementation\\n    uint256 constant _NOT_ENTERED = 1;\\n    uint256 constant _ENTERED = 2;\\n\\n    event PendingGovernorshipTransfer(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    event GovernorshipTransferred(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial Governor.\\n     */\\n    constructor() {\\n        _setGovernor(msg.sender);\\n        emit GovernorshipTransferred(address(0), _governor());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function governor() public view returns (address) {\\n        return _governor();\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function _governor() internal view returns (address governorOut) {\\n        bytes32 position = governorPosition;\\n        assembly {\\n            governorOut := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending Governor.\\n     */\\n    function _pendingGovernor()\\n        internal\\n        view\\n        returns (address pendingGovernor)\\n    {\\n        bytes32 position = pendingGovernorPosition;\\n        assembly {\\n            pendingGovernor := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the Governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(isGovernor(), \\\"Caller is not the Governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current Governor.\\n     */\\n    function isGovernor() public view returns (bool) {\\n        return msg.sender == _governor();\\n    }\\n\\n    function _setGovernor(address newGovernor) internal {\\n        bytes32 position = governorPosition;\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        bytes32 position = reentryStatusPosition;\\n        uint256 _reentry_status;\\n        assembly {\\n            _reentry_status := sload(position)\\n        }\\n\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_reentry_status != _ENTERED, \\\"Reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        assembly {\\n            sstore(position, _ENTERED)\\n        }\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        assembly {\\n            sstore(position, _NOT_ENTERED)\\n        }\\n    }\\n\\n    function _setPendingGovernor(address newGovernor) internal {\\n        bytes32 position = pendingGovernorPosition;\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the current Governor. Must be claimed for this to complete\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function transferGovernance(address _newGovernor) external onlyGovernor {\\n        _setPendingGovernor(_newGovernor);\\n        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\\n    }\\n\\n    /**\\n     * @dev Claim Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the new Governor.\\n     */\\n    function claimGovernance() external {\\n        require(\\n            msg.sender == _pendingGovernor(),\\n            \\\"Only the pending Governor can complete the claim\\\"\\n        );\\n        _changeGovernor(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function _changeGovernor(address _newGovernor) internal {\\n        require(_newGovernor != address(0), \\\"New Governor is address(0)\\\");\\n        emit GovernorshipTransferred(_governor(), _newGovernor);\\n        _setGovernor(_newGovernor);\\n    }\\n}\\n\",\"keccak256\":\"0xb3dce4586edcdedaa0573e194bfd4fbd064a1494f7246c19debb673a9d2157a9\",\"license\":\"MIT\"},\"contracts/staking/FeeVault.sol\":{\"content\":\"/*\\n * Origin Protocol\\n * https://originprotocol.com\\n *\\n * Released under the MIT license\\n * SPDX-License-Identifier: MIT\\n * https://github.com/OriginProtocol/nft-launchpad\\n *\\n * Copyright 2022 Origin Protocol, Inc\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in\\n * all copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n * SOFTWARE.\\n */\\n\\npragma solidity ^0.8.4;\\n\\nimport {IERC20Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\nimport {Initializable} from '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport {PausableUpgradeable} from '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\nimport {SafeERC20Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\n\\nimport {Governable} from '../governance/Governable.sol';\\n\\ninterface IFeeVault {\\n    function controller() external view returns (address);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function sendETHRewards(address userAddress, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function sendTokenRewards(\\n        address tokenAddress,\\n        address userAddress,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function recoverERC20(\\n        address tokenAddress,\\n        uint256 tokenAmount,\\n        address toAddress\\n    ) external returns (bool);\\n\\n    function setController(address controllerAddress) external;\\n}\\n\\n/**\\n * @title Story FeeVault contract\\n * @notice Contract to collect NFT sales profits and rewards to be distributed\\n *      to OGN stakers.\\n */\\ncontract FeeVault is Initializable, Governable, PausableUpgradeable, IFeeVault {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    address public override controller;\\n\\n    address private constant ASSET_ETH =\\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    // @dev Rewards have been sent to the season\\n    event RewardsSent(\\n        address indexed asset,\\n        address indexed toAddress,\\n        uint256 amount\\n    );\\n\\n    // @dev A new controller has been set\\n    event NewController(address controllerAddress);\\n\\n    modifier onlyController() {\\n        require(_msgSender() == controller, 'FeeVault: Sender not controller');\\n        _;\\n    }\\n\\n    /**\\n     * @param controllerAddress - Address for the account that will receive the\\n     *      rewards\\n     */\\n    function initialize(address controllerAddress) external initializer {\\n        __Pausable_init();\\n        // controller will probably be zero on initial deploy\\n        controller = controllerAddress;\\n    }\\n\\n    ///\\n    /// Externals\\n    ///\\n\\n    /**\\n     * @dev Send ETH rewards to a user. Can only be called by controller.\\n     * @param userAddress - address of the recipient of the ETH\\n     * @param amount - amount of ETH (in wei)\\n     */\\n    function sendETHRewards(address userAddress, uint256 amount)\\n        external\\n        override\\n        whenNotPaused\\n        onlyController\\n        returns (bool)\\n    {\\n        require(userAddress != address(0), 'FeeVault: ETH to black hole');\\n        require(amount > 0, 'FeeVault: Attempt to send 0 ETH');\\n\\n        emit RewardsSent(ASSET_ETH, userAddress, amount);\\n\\n        // transfer() does not send enough gas for a delegate call to an\\n        // empty receive() function.\\n        (bool success, ) = userAddress.call{value: amount, gas: 2800}('');\\n\\n        // To align behavior with sendTokenRewards\\n        require(success, 'FeeVault: ETH transfer failed');\\n\\n        return success;\\n    }\\n\\n    /**\\n     * @dev Send token rewards to a user. Can only be called by controller.\\n     * @param tokenAddress - address of the token to send\\n     * @param userAddress - address of the recipient of the tokens\\n     * @param amount - amount of the token to send\\n     */\\n    function sendTokenRewards(\\n        address tokenAddress,\\n        address userAddress,\\n        uint256 amount\\n    ) external override whenNotPaused onlyController returns (bool) {\\n        require(userAddress != address(0), 'FeeVault: Token to black hole');\\n        require(amount > 0, 'FeeVault: Attempt to send 0');\\n\\n        emit RewardsSent(tokenAddress, userAddress, amount);\\n\\n        return _sendTokens(tokenAddress, userAddress, amount);\\n    }\\n\\n    /**\\n     * @notice Recover ERC20 tokens sent to contract.  This can only be called\\n     *      by the governor.\\n     * @param tokenAddress - address of the token to recover\\n     * @param tokenAmount - amount of the token to recover\\n     * @param toAddress - address of the recipient of the tokens\\n     */\\n    function recoverERC20(\\n        address tokenAddress,\\n        uint256 tokenAmount,\\n        address toAddress\\n    ) external override onlyGovernor whenNotPaused returns (bool) {\\n        return _sendTokens(tokenAddress, toAddress, tokenAmount);\\n    }\\n\\n    /**\\n     * @notice Set series address\\n     */\\n    function setController(address controllerAddress)\\n        external\\n        override\\n        onlyGovernor\\n    {\\n        emit NewController(controllerAddress);\\n        controller = controllerAddress;\\n    }\\n\\n    /**\\n     * @notice Pause all funds movement functionality\\n     */\\n    function pause() external override onlyGovernor {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Pause all funds movement functionality\\n     */\\n    function unpause() external override onlyGovernor {\\n        _unpause();\\n    }\\n\\n    // @dev Allow this contract to receive ETH\\n    receive() external payable {}\\n\\n    ///\\n    /// Internals\\n    ///\\n\\n    function _sendTokens(\\n        address tokenAddress,\\n        address toAddress,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        IERC20Upgradeable(tokenAddress).safeTransfer(toAddress, amount);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x2309a2a28209bd3c0195e30c674af7372848f146d68bb14d485b48931bfb2ee9\",\"license\":\"MIT\"},\"contracts/staking/ISeason.sol\":{\"content\":\"/*\\n * Origin Protocol\\n * https://originprotocol.com\\n *\\n * Released under the MIT license\\n * SPDX-License-Identifier: MIT\\n * https://github.com/OriginProtocol/nft-launchpad\\n *\\n * Copyright 2022 Origin Protocol, Inc\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in\\n * all copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n * SOFTWARE.\\n */\\n\\npragma solidity ^0.8.4;\\n\\ninterface ISeason {\\n    function claimEndTime() external view returns (uint256);\\n\\n    function lockStartTime() external view returns (uint256);\\n\\n    function endTime() external view returns (uint256);\\n\\n    function startTime() external view returns (uint256);\\n\\n    function getTotalPoints() external view returns (uint128);\\n\\n    function getPoints(address userAddress) external view returns (uint128);\\n\\n    function expectedRewards(address userAddress)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function pointsInTime(uint256 amount, uint256 blockStamp)\\n        external\\n        view\\n        returns (uint128);\\n\\n    function claim(address userAddress) external returns (uint256, uint256);\\n\\n    function stake(address userAddress, uint256 amount)\\n        external\\n        returns (uint128);\\n\\n    function unstake(address userAddress) external returns (uint256, uint256);\\n\\n    function bootstrap(uint256 initialSupply) external;\\n}\\n\",\"keccak256\":\"0xd1e964e5bc3c437397d0eb6b69fd31dc8291292aae44946ca892d0cd2675145e\",\"license\":\"MIT\"},\"contracts/staking/Series.sol\":{\"content\":\"/*\\n * Origin Protocol\\n * https://originprotocol.com\\n *\\n * Released under the MIT license\\n * SPDX-License-Identifier: MIT\\n * https://github.com/OriginProtocol/nft-launchpad\\n *\\n * Copyright 2022 Origin Protocol, Inc\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in\\n * all copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n * SOFTWARE.\\n */\\n\\npragma solidity ^0.8.4;\\n\\nimport {AddressUpgradeable as Address} from '@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol';\\nimport {Initializable} from '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport {IERC20Upgradeable as IERC20} from '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\n\\nimport {Governable} from '../governance/Governable.sol';\\nimport {IFeeVault} from './FeeVault.sol';\\nimport {ISeason} from './ISeason.sol';\\n\\ninterface ISeries {\\n    function ogn() external view returns (address);\\n\\n    function vault() external view returns (address);\\n\\n    function currentClaimingIndex() external view returns (uint256);\\n\\n    function currentStakingIndex() external view returns (uint256);\\n\\n    function liveSeason() external view returns (uint256);\\n\\n    function expectedClaimingSeason() external view returns (address);\\n\\n    function expectedStakingSeason() external view returns (address);\\n\\n    function latestStakeTime(address userAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function balanceOf(address userAddress) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function claim() external returns (uint256, uint256);\\n\\n    function stake(uint256 amount) external returns (uint256, uint256);\\n\\n    function unstake() external returns (uint256);\\n\\n    function popSeason() external;\\n\\n    function pushSeason(address season) external;\\n\\n    function bootstrapSeason(uint256 seasonIndex, uint256 totalStaked) external;\\n}\\n\\n/**\\n * @title Story Series staking contract\\n * @notice Primary interaction OGN staking contract for Story profit sharing\\n *      and rewards.\\n */\\ncontract Series is Initializable, Governable, ISeries {\\n    address public override vault;\\n    address public override ogn;\\n\\n    address[] public seasons;\\n    uint256 public override currentStakingIndex;\\n    uint256 public override currentClaimingIndex;\\n    uint256 private totalStakedOGN;\\n\\n    mapping(address => uint256) private stakedOGN;\\n    mapping(address => uint256) private userLastStakingTime;\\n\\n    /**\\n     * @dev A new season has been registered\\n     * @param number - The season ID (1-indexed)\\n     * @param season - The address of the new season\\n     */\\n    event NewSeason(uint256 indexed number, address indexed season);\\n\\n    /**\\n     * @dev A season has started\\n     * @param number - The season ID (1-indexed)\\n     * @param season - The address of the new season\\n     */\\n    event SeasonStart(uint256 indexed number, address indexed season);\\n\\n    /**\\n     * @dev A season has been cancelled and removed\\n     * @param season - The address of the new season\\n     */\\n    event SeasonCancelled(address indexed season);\\n\\n    // @dev only execute if there's an active season set\\n    modifier requireActiveSeason() {\\n        require(seasons.length > 0, 'Series: No active season');\\n        _;\\n    }\\n\\n    /**\\n     * @param ogn_ - Address for the OGN token\\n     * @param vault_ - Address for the FeeVault\\n     */\\n    function initialize(address ogn_, address vault_) external initializer {\\n        require(ogn_ != address(0), 'Series: Zero address: OGN');\\n        require(vault_ != address(0), 'Series: Zero address: Vault');\\n        ogn = ogn_;\\n        vault = vault_;\\n    }\\n\\n    ///\\n    /// Externals\\n    ///\\n\\n    /**\\n     * @notice The current \\\"live\\\" season (earliest non-ended season)\\n     * @return index of the live season\\n     */\\n    function liveSeason() external view override returns (uint256) {\\n        if (seasons.length <= 1) {\\n            return 0;\\n        }\\n\\n        for (uint256 i = seasons.length; i > 0; i--) {\\n            uint256 idx = i - 1;\\n\\n            if (block.timestamp >= ISeason(seasons[idx]).startTime()) {\\n                return idx;\\n            }\\n        }\\n\\n        return currentStakingIndex;\\n    }\\n\\n    /**\\n     * @notice The staking season, should stake() be called.  This takes into\\n     * account currentStakingIndex potentially advancing.\\n     * @return address of the expected claiming season\\n     */\\n    function expectedStakingSeason() external view override returns (address) {\\n        if (seasons.length < 1) {\\n            return address(0);\\n        }\\n\\n        ISeason season = ISeason(seasons[currentStakingIndex]);\\n\\n        if (\\n            block.timestamp >= season.lockStartTime() &&\\n            seasons.length > currentStakingIndex + 1\\n        ) {\\n            return seasons[currentStakingIndex + 1];\\n        }\\n\\n        return seasons[currentStakingIndex];\\n    }\\n\\n    /**\\n     * @notice The claiming season, should claim/unstake be called.  This\\n     * takes into account currentClaimingIndex potentially advancing.\\n     * @return address of the expected claiming season\\n     */\\n    function expectedClaimingSeason() external view override returns (address) {\\n        if (seasons.length < 1) {\\n            return address(0);\\n        }\\n\\n        ISeason season = ISeason(seasons[currentClaimingIndex]);\\n\\n        if (\\n            block.timestamp >= season.claimEndTime() &&\\n            seasons.length > currentClaimingIndex + 1\\n        ) {\\n            return seasons[currentClaimingIndex + 1];\\n        }\\n\\n        return seasons[currentClaimingIndex];\\n    }\\n\\n    /**\\n     * @notice Get the latest stake block timestamp for a user\\n     * @param userAddress - address for which to return their last stake time\\n     * @return timestamp for last stake time for a user (or 0 if none)\\n     */\\n    function latestStakeTime(address userAddress)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return userLastStakingTime[userAddress];\\n    }\\n\\n    /**\\n     * @notice Total staked OGN for a user\\n     * @param userAddress - address for which to return their points\\n     * @return total OGN staked\\n     */\\n    function balanceOf(address userAddress)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return stakedOGN[userAddress];\\n    }\\n\\n    /**\\n     * @notice Total staked OGN of all users\\n     * @return total OGN staked from all users\\n     */\\n    function totalSupply() external view override returns (uint256) {\\n        return totalStakedOGN;\\n    }\\n\\n    /**\\n     * @notice Set the address for the OGN token.\\n     * @dev other contracts reference this value as well\\n     * @param ogn_ - address for the contract\\n     */\\n    function setOGN(address ogn_) external onlyGovernor {\\n        require(ogn_ != address(0), 'Series: Zero address: OGN');\\n        ogn = ogn_;\\n    }\\n\\n    /**\\n     * @notice Set the address for the FeeVault.\\n     * @dev other contracts reference this value as well\\n     * @param vault_ - address for the contract\\n     */\\n    function setVault(address vault_) external onlyGovernor {\\n        require(vault_ != address(0), 'Series: Zero address: FeeVault');\\n        vault = vault_;\\n    }\\n\\n    /**\\n     * @notice Stake OGN for fee sharing and rewards. Users can call this\\n     *      multiple times to add to their stake. This contract must be\\n     *      approved to transfer the given amount of OGN from the user.\\n     *\\n     * @param amount - The amount of OGN to stake\\n     * @return total amount of OGN staked by the user\\n     * @return total points received for the user's entire stake for the\\n     *      staking season\\n     */\\n    function stake(uint256 amount)\\n        external\\n        override\\n        requireActiveSeason\\n        returns (uint256, uint256)\\n    {\\n        require(amount > 0, 'Series: No stake amount');\\n\\n        uint128 stakePoints;\\n        address userAddress = msg.sender;\\n        IERC20 token = IERC20(ogn);\\n        ISeason season = _acquireStakingSeason();\\n\\n        // Transfer OGN to Series\\n        require(\\n            token.transferFrom(userAddress, address(this), amount),\\n            'Series: OGN transfer failed'\\n        );\\n\\n        // Record stake for the user and get their points total for return\\n        stakePoints = season.stake(userAddress, amount);\\n\\n        // Update balances. This must occur after the stake() call to allow\\n        // for clean rollover.  Otherwise, this new balance could be\\n        // considered historical and used as rollover on top of new amount.\\n        stakedOGN[userAddress] += amount;\\n        totalStakedOGN += amount;\\n        userLastStakingTime[userAddress] = block.timestamp;\\n\\n        return (stakedOGN[userAddress], stakePoints);\\n    }\\n\\n    /**\\n     * @notice Unstake previously staked OGN. This will unstake their full\\n     *      OGN stake amount and pay out any rewards (if within a claim period)\\n     *\\n     * @return amount of OGN unstaked\\n     */\\n    function unstake() external override requireActiveSeason returns (uint256) {\\n        address userAddress = msg.sender;\\n        uint256 amount = stakedOGN[userAddress];\\n        ISeason claimSeason = _acquireClaimingSeason();\\n\\n        (uint256 rewardETH, uint256 rewardOGN) = claimSeason.unstake(\\n            userAddress\\n        );\\n\\n        // Make sure to unstake from staking season as well to zero-out user\\n        if (currentClaimingIndex < currentStakingIndex) {\\n            ISeason stakeSeason = ISeason(seasons[currentStakingIndex]);\\n            // Ignored return val because there can't be multiple seasons in\\n            // claim period at one time.  This should return (0,0).\\n            stakeSeason.unstake(userAddress);\\n        }\\n\\n        // Balance updates need to happen after unstake() calls to allow\\n        // rollover calculation to get a user's stake balance.\\n        stakedOGN[userAddress] = 0;\\n        totalStakedOGN -= amount;\\n\\n        // Send rewards to user (if any)\\n        _transferRewards(userAddress, rewardETH, rewardOGN);\\n\\n        // Send staked OGN back to user\\n        require(\\n            IERC20(ogn).transfer(userAddress, amount),\\n            'Series: OGN transfer failed'\\n        );\\n\\n        return amount;\\n    }\\n\\n    /**\\n     * @notice Claim profit share and OGN rewards.\\n     *\\n     * @return claimedETH - amount of ETH profit share claimed\\n     * @return claimedOGN - amount of OGN rewards claimed\\n     */\\n    function claim()\\n        external\\n        override\\n        requireActiveSeason\\n        returns (uint256, uint256)\\n    {\\n        address userAddress = msg.sender;\\n        ISeason season = _acquireClaimingSeason();\\n\\n        (uint256 rewardETH, uint256 rewardOGN) = season.claim(userAddress);\\n\\n        _transferRewards(userAddress, rewardETH, rewardOGN);\\n\\n        return (rewardETH, rewardOGN);\\n    }\\n\\n    /**\\n     * @notice Add a new season.  It will be the last season in the sequence.\\n     *\\n     * @param season - address for the new season\\n     */\\n    function pushSeason(address season) external override onlyGovernor {\\n        require(Address.isContract(season), 'Series: Season not a contract');\\n\\n        ISeason newSeason = ISeason(season);\\n\\n        // If we have seasons to compare, do some sanity checks\\n        if (seasons.length > 0) {\\n            ISeason prevSeason = ISeason(seasons[seasons.length - 1]);\\n\\n            // End time must be after claim period to prevent overlap of claim\\n            // periods\\n            require(\\n                newSeason.endTime() > prevSeason.claimEndTime(),\\n                'Series: Invalid end time'\\n            );\\n\\n            // It's critical the start time begins after the previous season's\\n            // lock start time to avoid advancing early into the staking slot.\\n            // Since its end time is after the lock start time and seasons\\n            // probably shouldn't overlap for clarity sake, we check against\\n            // end time.\\n            require(\\n                newSeason.startTime() >= prevSeason.endTime(),\\n                'Series: Invalid start time'\\n            );\\n        }\\n\\n        seasons.push(season);\\n\\n        emit NewSeason(seasons.length - 1, season);\\n\\n        if (seasons.length == 1) {\\n            ISeason(season).bootstrap(totalStakedOGN);\\n            emit SeasonStart(0, season);\\n        }\\n    }\\n\\n    /**\\n     * @notice Remove the final scheduled season if it is not an active\\n     *      staking season.\\n     */\\n    function popSeason() external override onlyGovernor {\\n        require(seasons.length > 0, 'Series: No seasons to cancel');\\n        require(\\n            currentStakingIndex < seasons.length - 1,\\n            'Series: Season is active'\\n        );\\n\\n        address cancelled = seasons[seasons.length - 1];\\n\\n        // Remove the last element\\n        seasons.pop();\\n\\n        emit SeasonCancelled(cancelled);\\n    }\\n\\n    /**\\n     * @notice Manually bootstrap a season.  This should only be used in the\\n     *      rare case a season receives no new stakes, so was never\\n     *      bootstraped.\\n     * @param totalStaked - The amount of totalStakedOGN to send to\\n     *      Season.bootstrap()\\n     */\\n    function bootstrapSeason(uint256 seasonIndex, uint256 totalStaked)\\n        external\\n        override\\n        onlyGovernor\\n    {\\n        require(seasonIndex < seasons.length, 'Series: Season does not exist');\\n\\n        ISeason season = ISeason(seasons[seasonIndex]);\\n\\n        require(\\n            block.timestamp >= season.lockStartTime(),\\n            'Series: Not locked'\\n        );\\n\\n        season.bootstrap(totalStaked);\\n    }\\n\\n    ///\\n    /// Internals\\n    ///\\n\\n    /**\\n     * @dev Return the season to use for staking, advancing if necessary\\n     * @return staking season\\n     */\\n    function _acquireStakingSeason() internal returns (ISeason) {\\n        ISeason season = ISeason(seasons[currentStakingIndex]);\\n\\n        // Locked seasons can accept stakes but will not award points,\\n        // therefore the staker will receive no rewards.  If we have another\\n        // Season available for (pre)staking, advance the index and use that\\n        // for staking operations.\\n        if (\\n            block.timestamp >= season.lockStartTime() &&\\n            seasons.length > currentStakingIndex + 1\\n        ) {\\n            currentStakingIndex += 1;\\n            season = ISeason(seasons[currentStakingIndex]);\\n            season.bootstrap(totalStakedOGN);\\n            emit SeasonStart(currentStakingIndex, seasons[currentStakingIndex]);\\n        }\\n\\n        return season;\\n    }\\n\\n    /**\\n     * @dev Return the season to use for claiming, advancing if necessary\\n     * @return claiming season\\n     */\\n    function _acquireClaimingSeason() internal returns (ISeason) {\\n        ISeason season = ISeason(seasons[currentClaimingIndex]);\\n\\n        // If the claim period has ended, advance to the next season, if\\n        // available.\\n        if (\\n            block.timestamp >= season.claimEndTime() &&\\n            seasons.length > currentClaimingIndex + 1\\n        ) {\\n            currentClaimingIndex += 1;\\n            season = ISeason(seasons[currentClaimingIndex]);\\n        }\\n\\n        return season;\\n    }\\n\\n    /**\\n     * @dev Transfer the given ETH and OGN to the given user from the vault\\n     * @param userAddress - Recipient of the rewards\\n     * @param rewardETH - Amount of ETH to transfer\\n     * @param rewardOGN - Amount of OGN to transfer\\n     */\\n    function _transferRewards(\\n        address userAddress,\\n        uint256 rewardETH,\\n        uint256 rewardOGN\\n    ) internal {\\n        IFeeVault rewards = IFeeVault(vault);\\n\\n        if (rewardETH > 0) {\\n            rewards.sendETHRewards(userAddress, rewardETH);\\n        }\\n\\n        if (rewardOGN > 0) {\\n            rewards.sendTokenRewards(ogn, userAddress, rewardOGN);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7c063c049346100a0cae9f4bf217dea7e15168a555e54390758c264b78cac2af\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c80636f0ca70b116100c3578063d38bfff41161007c578063d38bfff4146102ce578063df011cb5146102e1578063f2b7c69e146102e9578063f34e3852146102f2578063f5d709a1146102fb578063fbfa77cf1461030e57600080fd5b80636f0ca70b1461025757806370a082311461026a5780637ee5553d14610293578063a694fc3a1461029b578063b38b1f52146102ae578063c7af3352146102b657600080fd5b8063485cc95511610115578063485cc955146101f15780634be4e024146102045780634e71d92d1461020c5780635d36b19014610229578063602bc098146102315780636817031b1461024457600080fd5b806307161ecd1461015d5780630c340a2414610199578063144e5246146101b957806318160ddd146101ce5780631f1d5ee3146101d65780632def6620146101e9575b600080fd5b61018661016b366004611dbb565b6001600160a01b031660009081526007602052604090205490565b6040519081526020015b60405180910390f35b6101a1610327565b6040516001600160a01b039091168152602001610190565b6101cc6101c7366004611dbb565b610344565b005b600554610186565b6101cc6101e4366004611dbb565b6103e5565b610186610830565b6101cc6101ff366004611ddc565b610acb565b6101cc610c6f565b610214610e05565b60408051928352602083019190915201610190565b6101cc610ed1565b6001546101a1906001600160a01b031681565b6101cc610252366004611dbb565b610f77565b6101cc610265366004611e85565b61101b565b610186610278366004611dbb565b6001600160a01b031660009081526006602052604090205490565b6101a16111da565b6102146102a9366004611e55565b611326565b610186611594565b6102be611689565b6040519015158152602001610190565b6101cc6102dc366004611dbb565b6116ba565b6101a161175e565b61018660045481565b61018660035481565b6101a1610309366004611e55565b611871565b6000546101a1906201000090046001600160a01b031681565b600061033f600080516020611f948339815191525490565b905090565b61034c611689565b6103715760405162461bcd60e51b815260040161036890611ec9565b60405180910390fd5b6001600160a01b0381166103c35760405162461bcd60e51b815260206004820152601960248201527829b2b934b2b99d102d32b9379030b2323932b9b99d1027a3a760391b6044820152606401610368565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6103ed611689565b6104095760405162461bcd60e51b815260040161036890611ec9565b803b6104575760405162461bcd60e51b815260206004820152601d60248201527f5365726965733a20536561736f6e206e6f74206120636f6e74726163740000006044820152606401610368565b60025481901561070757600280546000919061047590600190611f4f565b8154811061049357634e487b7160e01b600052603260045260246000fd5b60009182526020918290200154604080516340d1d25560e01b815290516001600160a01b03909216935083926340d1d25592600480840193829003018186803b1580156104df57600080fd5b505afa1580156104f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105179190611e6d565b826001600160a01b0316633197cbb66040518163ffffffff1660e01b815260040160206040518083038186803b15801561055057600080fd5b505afa158015610564573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105889190611e6d565b116105d55760405162461bcd60e51b815260206004820152601860248201527f5365726965733a20496e76616c696420656e642074696d6500000000000000006044820152606401610368565b806001600160a01b0316633197cbb66040518163ffffffff1660e01b815260040160206040518083038186803b15801561060e57600080fd5b505afa158015610622573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106469190611e6d565b826001600160a01b03166378e979256040518163ffffffff1660e01b815260040160206040518083038186803b15801561067f57600080fd5b505afa158015610693573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b79190611e6d565b10156107055760405162461bcd60e51b815260206004820152601a60248201527f5365726965733a20496e76616c69642073746172742074696d650000000000006044820152606401610368565b505b600280546001808201835560008390527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90910180546001600160a01b0319166001600160a01b03861690811790915591546107639190611f4f565b6040517f2c44fff2b20da83506e95ff9a6c5fbb3797c80ba3abef25e1cafdb8c6fdb6cea90600090a36002546001141561082c57600554604051631b4351cf60e11b815260048101919091526001600160a01b03831690633686a39e90602401600060405180830381600087803b1580156107dd57600080fd5b505af11580156107f1573d6000803e3d6000fd5b50506040516001600160a01b0385169250600091507f15a75de13661af63c89b09c2510276ddae1051a0a6d89587cf448b03be13af17908290a35b5050565b6002546000906108525760405162461bcd60e51b815260040161036890611f00565b336000818152600660205260408120549061086b61189b565b60405163f2888dbb60e01b81526001600160a01b03858116600483015291925060009182919084169063f2888dbb906024016040805180830381600087803b1580156108b657600080fd5b505af11580156108ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ee9190611ea6565b9150915060035460045410156109b157600060026003548154811061092357634e487b7160e01b600052603260045260246000fd5b60009182526020909120015460405163f2888dbb60e01b81526001600160a01b0388811660048301529091169150819063f2888dbb906024016040805180830381600087803b15801561097557600080fd5b505af1158015610989573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ad9190611ea6565b5050505b6001600160a01b0385166000908152600660205260408120819055600580548692906109de908490611f4f565b909155506109ef90508583836119c1565b60015460405163a9059cbb60e01b81526001600160a01b038781166004830152602482018790529091169063a9059cbb90604401602060405180830381600087803b158015610a3d57600080fd5b505af1158015610a51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a759190611e0e565b610ac15760405162461bcd60e51b815260206004820152601b60248201527f5365726965733a204f474e207472616e73666572206661696c656400000000006044820152606401610368565b5091935050505090565b600054610100900460ff16610ae65760005460ff1615610aea565b303b155b610b4d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610368565b600054610100900460ff16158015610b6f576000805461ffff19166101011790555b6001600160a01b038316610bc15760405162461bcd60e51b815260206004820152601960248201527829b2b934b2b99d102d32b9379030b2323932b9b99d1027a3a760391b6044820152606401610368565b6001600160a01b038216610c175760405162461bcd60e51b815260206004820152601b60248201527f5365726965733a205a65726f20616464726573733a205661756c7400000000006044820152606401610368565b600180546001600160a01b0319166001600160a01b03858116919091179091556000805462010000600160b01b03191662010000928516929092029190911790558015610c6a576000805461ff00191690555b505050565b610c77611689565b610c935760405162461bcd60e51b815260040161036890611ec9565b600254610ce25760405162461bcd60e51b815260206004820152601c60248201527f5365726965733a204e6f20736561736f6e7320746f2063616e63656c000000006044820152606401610368565b600254610cf190600190611f4f565b60035410610d415760405162461bcd60e51b815260206004820152601860248201527f5365726965733a20536561736f6e2069732061637469766500000000000000006044820152606401610368565b6002805460009190610d5590600190611f4f565b81548110610d7357634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600280546001600160a01b0390921692509080610dac57634e487b7160e01b600052603160045260246000fd5b600082815260208120820160001990810180546001600160a01b03191690559091019091556040516001600160a01b038316917f11fcddd71b326a2219d624751fd87130db438afeaf59a412a96af76d973d91a891a250565b6002546000908190610e295760405162461bcd60e51b815260040161036890611f00565b336000610e3461189b565b604051630f41a04d60e11b81526001600160a01b038481166004830152919250600091829190841690631e83409a906024016040805180830381600087803b158015610e7f57600080fd5b505af1158015610e93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb79190611ea6565b91509150610ec68483836119c1565b909450925050509091565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db546001600160a01b0316336001600160a01b031614610f6c5760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b6064820152608401610368565b610f7533611af9565b565b610f7f611689565b610f9b5760405162461bcd60e51b815260040161036890611ec9565b6001600160a01b038116610ff15760405162461bcd60e51b815260206004820152601e60248201527f5365726965733a205a65726f20616464726573733a204665655661756c7400006044820152606401610368565b600080546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b611023611689565b61103f5760405162461bcd60e51b815260040161036890611ec9565b60025482106110905760405162461bcd60e51b815260206004820152601d60248201527f5365726965733a20536561736f6e20646f6573206e6f742065786973740000006044820152606401610368565b6000600283815481106110b357634e487b7160e01b600052603260045260246000fd5b6000918252602091829020015460408051633163fd3b60e11b815290516001600160a01b03909216935083926362c7fa7692600480840193829003018186803b1580156110ff57600080fd5b505afa158015611113573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111379190611e6d565b42101561117b5760405162461bcd60e51b815260206004820152601260248201527114d95c9a595cce88139bdd081b1bd8dad95960721b6044820152606401610368565b604051631b4351cf60e11b8152600481018390526001600160a01b03821690633686a39e90602401600060405180830381600087803b1580156111bd57600080fd5b505af11580156111d1573d6000803e3d6000fd5b50505050505050565b600254600090600111156111ee5750600090565b600060026003548154811061121357634e487b7160e01b600052603260045260246000fd5b6000918252602091829020015460408051633163fd3b60e11b815290516001600160a01b03909216935083926362c7fa7692600480840193829003018186803b15801561125f57600080fd5b505afa158015611273573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112979190611e6d565b42101580156112b457506003546112af906001611f37565b600254115b1561130357600260035460016112ca9190611f37565b815481106112e857634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031692915050565b6002600354815481106112e857634e487b7160e01b600052603260045260246000fd5b600254600090819061134a5760405162461bcd60e51b815260040161036890611f00565b6000831161139a5760405162461bcd60e51b815260206004820152601760248201527f5365726965733a204e6f207374616b6520616d6f756e740000000000000000006044820152606401610368565b60015460009033906001600160a01b0316826113b4611bbd565b6040516323b872dd60e01b81526001600160a01b038581166004830152306024830152604482018a9052919250908316906323b872dd90606401602060405180830381600087803b15801561140857600080fd5b505af115801561141c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114409190611e0e565b61148c5760405162461bcd60e51b815260206004820152601b60248201527f5365726965733a204f474e207472616e73666572206661696c656400000000006044820152606401610368565b6040516356e4bb9760e11b81526001600160a01b0384811660048301526024820189905282169063adc9772e90604401602060405180830381600087803b1580156114d657600080fd5b505af11580156114ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150e9190611e2e565b6001600160a01b03841660009081526006602052604081208054929650899290919061153b908490611f37565b9250508190555086600560008282546115549190611f37565b9091555050506001600160a01b03909116600090815260076020908152604080832042905560069091529020549350506001600160801b03169050915091565b6002546000906001106115a75750600090565b6002545b80156116815760006115be600183611f4f565b9050600281815481106115e157634e487b7160e01b600052603260045260246000fd5b60009182526020918290200154604080516378e9792560e01b815290516001600160a01b03909216926378e9792592600480840193829003018186803b15801561162a57600080fd5b505afa15801561163e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116629190611e6d565b421061166e5792915050565b508061167981611f66565b9150506115ab565b505060035490565b60006116a1600080516020611f948339815191525490565b6001600160a01b0316336001600160a01b031614905090565b6116c2611689565b6116de5760405162461bcd60e51b815260040161036890611ec9565b611706817f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b806001600160a01b0316611726600080516020611f948339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b600254600090600111156117725750600090565b600060026004548154811061179757634e487b7160e01b600052603260045260246000fd5b60009182526020918290200154604080516340d1d25560e01b815290516001600160a01b03909216935083926340d1d25592600480840193829003018186803b1580156117e357600080fd5b505afa1580156117f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181b9190611e6d565b42101580156118385750600454611833906001611f37565b600254115b1561184e57600260045460016112ca9190611f37565b6002600454815481106112e857634e487b7160e01b600052603260045260246000fd5b6002818154811061188157600080fd5b6000918252602090912001546001600160a01b0316905081565b6000806002600454815481106118c157634e487b7160e01b600052603260045260246000fd5b60009182526020918290200154604080516340d1d25560e01b815290516001600160a01b03909216935083926340d1d25592600480840193829003018186803b15801561190d57600080fd5b505afa158015611921573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119459190611e6d565b4210158015611962575060045461195d906001611f37565b600254115b156119bc5760016004600082825461197a9190611f37565b925050819055506002600454815481106119a457634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031690505b919050565b6000546201000090046001600160a01b03168215611a5d576040516308784ad360e31b81526001600160a01b038581166004830152602482018590528216906343c2569890604401602060405180830381600087803b158015611a2357600080fd5b505af1158015611a37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a5b9190611e0e565b505b8115611af35760015460405163c340a84d60e01b81526001600160a01b0391821660048201528582166024820152604481018490529082169063c340a84d90606401602060405180830381600087803b158015611ab957600080fd5b505af1158015611acd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af19190611e0e565b505b50505050565b6001600160a01b038116611b4f5760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f7220697320616464726573732830290000000000006044820152606401610368565b806001600160a01b0316611b6f600080516020611f948339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a3611bba81600080516020611f9483398151915255565b50565b600080600260035481548110611be357634e487b7160e01b600052603260045260246000fd5b6000918252602091829020015460408051633163fd3b60e11b815290516001600160a01b03909216935083926362c7fa7692600480840193829003018186803b158015611c2f57600080fd5b505afa158015611c43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c679190611e6d565b4210158015611c845750600354611c7f906001611f37565b600254115b156119bc57600160036000828254611c9c9190611f37565b92505081905550600260035481548110611cc657634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600554604051631b4351cf60e11b81526001600160a01b0390921692508291633686a39e91611d079160040190815260200190565b600060405180830381600087803b158015611d2157600080fd5b505af1158015611d35573d6000803e3d6000fd5b50505050600260035481548110611d5c57634e487b7160e01b600052603260045260246000fd5b60009182526020822001546003546040516001600160a01b039092169290917f15a75de13661af63c89b09c2510276ddae1051a0a6d89587cf448b03be13af179190a3919050565b80356001600160a01b03811681146119bc57600080fd5b600060208284031215611dcc578081fd5b611dd582611da4565b9392505050565b60008060408385031215611dee578081fd5b611df783611da4565b9150611e0560208401611da4565b90509250929050565b600060208284031215611e1f578081fd5b81518015158114611dd5578182fd5b600060208284031215611e3f578081fd5b81516001600160801b0381168114611dd5578182fd5b600060208284031215611e66578081fd5b5035919050565b600060208284031215611e7e578081fd5b5051919050565b60008060408385031215611e97578182fd5b50508035926020909101359150565b60008060408385031215611eb8578182fd5b505080516020909101519092909150565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b60208082526018908201527f5365726965733a204e6f2061637469766520736561736f6e0000000000000000604082015260600190565b60008219821115611f4a57611f4a611f7d565b500190565b600082821015611f6157611f61611f7d565b500390565b600081611f7557611f75611f7d565b506000190190565b634e487b7160e01b600052601160045260246000fdfe7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4aa2646970667358221220e09f07c4f96a08ffbe177d18a6503c4e80e67d108eef6a5b8659519df6fa3b8d64736f6c63430008040033",
  "devdoc": {
    "events": {
      "NewSeason(uint256,address)": {
        "details": "A new season has been registered",
        "params": {
          "number": "- The season ID (1-indexed)",
          "season": "- The address of the new season"
        }
      },
      "SeasonCancelled(address)": {
        "details": "A season has been cancelled and removed",
        "params": {
          "season": "- The address of the new season"
        }
      },
      "SeasonStart(uint256,address)": {
        "details": "A season has started",
        "params": {
          "number": "- The season ID (1-indexed)",
          "season": "- The address of the new season"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "balanceOf(address)": {
        "params": {
          "userAddress": "- address for which to return their points"
        },
        "returns": {
          "_0": "total OGN staked"
        }
      },
      "bootstrapSeason(uint256,uint256)": {
        "params": {
          "totalStaked": "- The amount of totalStakedOGN to send to      Season.bootstrap()"
        }
      },
      "claim()": {
        "returns": {
          "_0": "claimedETH - amount of ETH profit share claimed",
          "_1": "claimedOGN - amount of OGN rewards claimed"
        }
      },
      "claimGovernance()": {
        "details": "Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor."
      },
      "expectedClaimingSeason()": {
        "returns": {
          "_0": "address of the expected claiming season"
        }
      },
      "expectedStakingSeason()": {
        "returns": {
          "_0": "address of the expected claiming season"
        }
      },
      "governor()": {
        "details": "Returns the address of the current Governor."
      },
      "initialize(address,address)": {
        "params": {
          "ogn_": "- Address for the OGN token",
          "vault_": "- Address for the FeeVault"
        }
      },
      "isGovernor()": {
        "details": "Returns true if the caller is the current Governor."
      },
      "latestStakeTime(address)": {
        "params": {
          "userAddress": "- address for which to return their last stake time"
        },
        "returns": {
          "_0": "timestamp for last stake time for a user (or 0 if none)"
        }
      },
      "liveSeason()": {
        "returns": {
          "_0": "index of the live season"
        }
      },
      "pushSeason(address)": {
        "params": {
          "season": "- address for the new season"
        }
      },
      "setOGN(address)": {
        "details": "other contracts reference this value as well",
        "params": {
          "ogn_": "- address for the contract"
        }
      },
      "setVault(address)": {
        "details": "other contracts reference this value as well",
        "params": {
          "vault_": "- address for the contract"
        }
      },
      "stake(uint256)": {
        "params": {
          "amount": "- The amount of OGN to stake"
        },
        "returns": {
          "_0": "total amount of OGN staked by the user",
          "_1": "total points received for the user's entire stake for the      staking season"
        }
      },
      "totalSupply()": {
        "returns": {
          "_0": "total OGN staked from all users"
        }
      },
      "transferGovernance(address)": {
        "details": "Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete",
        "params": {
          "_newGovernor": "Address of the new Governor"
        }
      },
      "unstake()": {
        "returns": {
          "_0": "amount of OGN unstaked"
        }
      }
    },
    "title": "Story Series staking contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balanceOf(address)": {
        "notice": "Total staked OGN for a user"
      },
      "bootstrapSeason(uint256,uint256)": {
        "notice": "Manually bootstrap a season.  This should only be used in the      rare case a season receives no new stakes, so was never      bootstraped."
      },
      "claim()": {
        "notice": "Claim profit share and OGN rewards."
      },
      "expectedClaimingSeason()": {
        "notice": "The claiming season, should claim/unstake be called.  This takes into account currentClaimingIndex potentially advancing."
      },
      "expectedStakingSeason()": {
        "notice": "The staking season, should stake() be called.  This takes into account currentStakingIndex potentially advancing."
      },
      "latestStakeTime(address)": {
        "notice": "Get the latest stake block timestamp for a user"
      },
      "liveSeason()": {
        "notice": "The current \"live\" season (earliest non-ended season)"
      },
      "popSeason()": {
        "notice": "Remove the final scheduled season if it is not an active      staking season."
      },
      "pushSeason(address)": {
        "notice": "Add a new season.  It will be the last season in the sequence."
      },
      "setOGN(address)": {
        "notice": "Set the address for the OGN token."
      },
      "setVault(address)": {
        "notice": "Set the address for the FeeVault."
      },
      "stake(uint256)": {
        "notice": "Stake OGN for fee sharing and rewards. Users can call this      multiple times to add to their stake. This contract must be      approved to transfer the given amount of OGN from the user."
      },
      "totalSupply()": {
        "notice": "Total staked OGN of all users"
      },
      "unstake()": {
        "notice": "Unstake previously staked OGN. This will unstake their full      OGN stake amount and pay out any rewards (if within a claim period)"
      }
    },
    "notice": "Primary interaction OGN staking contract for Story profit sharing      and rewards.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 886,
        "contract": "contracts/staking/Series.sol:Series",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 889,
        "contract": "contracts/staking/Series.sol:Series",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 14063,
        "contract": "contracts/staking/Series.sol:Series",
        "label": "vault",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 14066,
        "contract": "contracts/staking/Series.sol:Series",
        "label": "ogn",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 14069,
        "contract": "contracts/staking/Series.sol:Series",
        "label": "seasons",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 14072,
        "contract": "contracts/staking/Series.sol:Series",
        "label": "currentStakingIndex",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 14075,
        "contract": "contracts/staking/Series.sol:Series",
        "label": "currentClaimingIndex",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 14077,
        "contract": "contracts/staking/Series.sol:Series",
        "label": "totalStakedOGN",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 14081,
        "contract": "contracts/staking/Series.sol:Series",
        "label": "stakedOGN",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 14085,
        "contract": "contracts/staking/Series.sol:Series",
        "label": "userLastStakingTime",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}